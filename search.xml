<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Android Studio动态调试Smail]]></title>
      <url>http://www.kongdewei.cn/2017/07/03/Android-Studio%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95Smail/</url>
      <content type="html"><![CDATA[<p>首发：<a href="http://kongdewei.cn/2017/07/03/Android-Studio%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95Smail/" target="_blank" rel="external">Android Studio动态调试Smail</a></p>
<p>0x00 前言<br><a href="http://kongdewei.cn/2017/06/30/DDCTF%E5%AE%89%E5%8D%93%E9%A2%98-writeup/" target="_blank" rel="external">DDCTF安卓题调试</a><br>上一次是静态修改，后来我在想能不能动态调试得到Flag，于是就有了这篇文章。</p>
<blockquote>
<p>apk下载地址<br><a href="http://download.csdn.net/detail/dad9988/9887419" target="_blank" rel="external">http://download.csdn.net/detail/dad9988/9887419</a><br><a id="more"></a></p>
<p>#0x01 准备工作</p>
<h2 id="下载、安装android-studio"><a href="#下载、安装android-studio" class="headerlink" title="下载、安装android studio"></a>下载、安装android studio</h2><p><a href="https://dl.google.com/dl/android/studio/install/2.3.2.0/android-studio-bundle-162.3934792-windows.exe" target="_blank" rel="external">https://dl.google.com/dl/android/studio/install/2.3.2.0/android-studio-bundle-162.3934792-windows.exe</a></p>
</blockquote>
<p>非常神奇，可以不翻(河蟹)墙下载,看来G(河蟹)F(河蟹)W对程序员还是很友善的。<br>android studio集成了所需要的东西，以前eclipse需要另外装各种东西方便很多。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6671501-0ff9957faf920f69.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="IDM下载中..."></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6671501-1b330e974557138a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="next"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6671501-4b74a8c3d2b850f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="如果C盘空间不够可以修改下盘符"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6671501-0ffa98fe15afbbb0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Setup Load..."></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6671501-09ebd5a4860ef4dd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="sdk包安装"></p>
<h2 id="下载、安装模拟器"><a href="#下载、安装模拟器" class="headerlink" title="下载、安装模拟器"></a>下载、安装模拟器</h2><blockquote>
<p> 推荐使用这款模拟器<br><a href="https://www.yeshen.com/" target="_blank" rel="external">https://www.yeshen.com/</a></p>
</blockquote>
<p>模拟器安装就不赘述了。</p>
<h2 id="改之理"><a href="#改之理" class="headerlink" title="改之理"></a>改之理</h2><p>很多apk解包使用apktools.jar会出现各种问题，直接用ide会方便很多。</p>
<blockquote>
<p>下载地址：<br> <a href="http://www.52pojie.cn/thread-399571-1-1.html" target="_blank" rel="external">http://www.52pojie.cn/thread-399571-1-1.html</a></p>
</blockquote>
<p>#0x02 实战操作</p>
<h2 id="1-解包与导入工程到Android-Studio"><a href="#1-解包与导入工程到Android-Studio" class="headerlink" title="1.解包与导入工程到Android Studio"></a>1.解包与导入工程到Android Studio</h2><p>首先使用apk改之理解包，直接用改之理打开apk包即可，改之理目录下就会有解包后的文件。<br><img src="http://upload-images.jianshu.io/upload_images/6671501-9d6eae63eac2fdda.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>work目录下是解包后的文件<br><img src="http://upload-images.jianshu.io/upload_images/6671501-9421f700c00b79cb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>打开Android Studio选Import project<br><img src="http://upload-images.jianshu.io/upload_images/6671501-a2021403a52a1e8e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>选择刚才的解包目录<br><img src="http://upload-images.jianshu.io/upload_images/6671501-a3d2fc495f199a35.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>直接next到底<br><img src="http://upload-images.jianshu.io/upload_images/6671501-e39da56d7e66038d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6671501-ce072ea9d6f6cf07.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>导入后会有一段时间的加载文件。<br><img src="http://upload-images.jianshu.io/upload_images/6671501-83cbdb690d570c87.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h2 id="2-安装smalidea"><a href="#2-安装smalidea" class="headerlink" title="2.安装smalidea"></a>2.安装smalidea</h2><p>File—&gt;Settings—&gt;Install plugin from disk<br><img src="http://upload-images.jianshu.io/upload_images/6671501-a0e92fc66131213e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<blockquote>
<p>下载smalidea-0.05.zip(这一步只需要做一次)<br><a href="https://bitbucket.org/JesusFreke/smali/downloads/" target="_blank" rel="external">https://bitbucket.org/JesusFreke/smali/downloads/</a></p>
</blockquote>
<p>选择刚下载的smalidea-0.05.zip<br><img src="http://upload-images.jianshu.io/upload_images/6671501-35fde0adcdf1314c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>导入需要重启一下。<br><img src="http://upload-images.jianshu.io/upload_images/6671501-39ed20c0bd810ace.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h2 id="3-寻找命令行启动参数"><a href="#3-寻找命令行启动参数" class="headerlink" title="3.寻找命令行启动参数"></a>3.寻找命令行启动参数</h2><p>改之理解包目录下打开AndroidManifest.xml,记录activity层的android:name值。<br><img src="http://upload-images.jianshu.io/upload_images/6671501-970dcf1884ae77da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h2 id="4-adb-shell启动apk"><a href="#4-adb-shell启动apk" class="headerlink" title="4.adb shell启动apk"></a>4.adb shell启动apk</h2><p>运行模拟器，在Android Studio中启动android device monitor<br><img src="http://upload-images.jianshu.io/upload_images/6671501-06eb42c39e71bc55.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>一般会自动链接到ADM中，如果没有自动链接上去使用以下命令进行链接。</p>
<blockquote>
<p>我推荐的这个模拟器是链接62001其他模拟器自查<br>adb connect 127.0.0.1:62001</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/6671501-e200faeb86605d67.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>安装apk到模拟器（apk直接拉进去就自动安装了），并使用命令启动apk（adb如果未找到命令，请百度如何解决。）</p>
<blockquote>
<p>adb shell am start -D -n com.didictf.hellolibs/com.didictf.hellolibs.MainActivity  </p>
</blockquote>
<p>运行命令后可通过adm看到有个红色的虫子图标，这个时候apk已经挂起等待调试了。<br><img src="http://upload-images.jianshu.io/upload_images/6671501-963bfb9e628a5101.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>在MainActivity下的OnCreate函数下断点</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6671501-cf257366c18855c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>点击如图的三角，选择Edit Configurations<br><img src="http://upload-images.jianshu.io/upload_images/6671501-72ed6d4addc5086f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>点击加号，选择Remote<br><img src="http://upload-images.jianshu.io/upload_images/6671501-6b53281823c9737b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>修改port为8700点击OK<br><img src="http://upload-images.jianshu.io/upload_images/6671501-e214767c2a03d0a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>点击调试按钮挂载到模拟器中</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6671501-cc40db725d7f6db4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>已经断在我们下的断点。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6671501-d2556f41ea49bfa1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>#0x03 调试<br><a href="http://kongdewei.cn/2017/06/30/DDCTF%E5%AE%89%E5%8D%93%E9%A2%98-writeup/" target="_blank" rel="external">DDCTF安卓题调试</a></p>
<p>上一篇文章分析得出关键位置在MainActivity中的onClickTest函数，这次我们直接在这里下断点，动态调试。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6671501-a32409efe54d3df4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>模拟器随便输入，点击test按钮，就会断在我们下的地方</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6671501-fe7bf17666b38866.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>点击如图加号添加v0 ,v1,p0监视变量，并F8单步向下，走到58行，就会从so中返回flag到系统apk的v1变量中。<br><img src="http://upload-images.jianshu.io/upload_images/6671501-580febd80d059429.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>对比下反编译的源码，更容易分析apk的工作流程。<br><img src="http://upload-images.jianshu.io/upload_images/6671501-c2317bf131ebf003.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>#0x04 总结<br>对于这个CTF的apk，动态调试会更加直观，下好断点，添加监视变量直接但步向下即可，比静态修改重新打包来的方便。</p>
<p>转载请注明出处。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[DDCTF安卓题-writeup]]></title>
      <url>http://www.kongdewei.cn/2017/06/30/DDCTF%E5%AE%89%E5%8D%93%E9%A2%98-writeup/</url>
      <content type="html"><![CDATA[<h1 id="0x01-引子"><a href="#0x01-引子" class="headerlink" title="0x01 引子"></a>0x01 引子</h1><p>前段做了一个滴滴CTF的其中一道安卓题目，题目并不难，主要分享一下做题过程和思路。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6671501-b5da14d5cee7f2d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="题目包"><br><a id="more"></a></p>
<h1 id="0x02-要求与提示"><a href="#0x02-要求与提示" class="headerlink" title="0x02 要求与提示"></a>0x02 要求与提示</h1><p>赛题背景：本挑战结合了Android, Java, C/C++，加密算法等知识点，考察了挑战者的binary逆向技术和加密算法能力。</p>
<p>赛题描述：本题是一个app，请试分析app中隐藏的key，逆向加密算法并得到对应的秘钥。可以在app中尝试输入key，如果正确会显示“correct”，如果错误会显示“Wrong”。<br>提   示：阅读assembly code，理解xor的加密逻辑和参数，解出答案。<br>评分标准：key正确则可进入下一题。</p>
<p>Flag格式为DDCTF-XXXXXXXXXXXX@didichuxing.com</p>
<p>还是很好辨认的<img src="http://upload-images.jianshu.io/upload_images/6671501-ba050aa48e79dbb0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h1 id="0x03-分析与过程"><a href="#0x03-分析与过程" class="headerlink" title="0x03 分析与过程"></a>0x03 分析与过程</h1><p><img src="http://upload-images.jianshu.io/upload_images/6671501-6d5497f007ffebc1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="运行app后"></p>
<p>直接点击下方的TEST按钮显示Wrong<br>上apkkiller<br>找到关键位置，进行关键词搜索（搜Wrong）。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6671501-c084c150baf021d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="appkiller找到关键位置"></p>
<p>反编译源码（appkiller上点击java图标）</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6671501-95060fbf26f78c84.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="关键位置源码"></p>
<p>这里直接贴上来代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span></span></div><div class="line">  <span class="keyword">extends</span> <span class="title">AppCompatActivity</span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">private</span> TextView mFlagEntryView;</div><div class="line">  <span class="keyword">private</span> TextView mFlagResultView;</div><div class="line">  </div><div class="line">  <span class="keyword">static</span></div><div class="line">  &#123;</div><div class="line">    System.loadLibrary(<span class="string">"hello-libs"</span>);</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClickTest</span><span class="params">(View paramView)</span></span></div><div class="line">  &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.mFlagEntryView.getText().toString().equals(stringFromJNI())) &#123;</div><div class="line">      <span class="keyword">this</span>.mFlagResultView.setText(<span class="string">"Correct"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (;;)</div><div class="line">    &#123;</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">      <span class="keyword">this</span>.mFlagResultView.setText(<span class="string">"Wrong"</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle paramBundle)</span></span></div><div class="line">  &#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(paramBundle);</div><div class="line">    setContentView(<span class="number">2130968602</span>);</div><div class="line">    <span class="keyword">this</span>.mFlagEntryView = ((TextView)findViewById(<span class="number">2131427413</span>));</div><div class="line">    <span class="keyword">this</span>.mFlagResultView = ((TextView)findViewById(<span class="number">2131427415</span>));</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">stringFromJNI</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其中onClickTest响应TEST按钮点击 </p>
<blockquote>
<p>this.mFlagEntryView.getText().toString().equals(stringFromJNI())</p>
</blockquote>
<p>从mFlagEntryView得到view控件内容，tostring转string型，使用equals对比stringFromJNI()返回值。</p>
<p>一般我们应该跟踪stringFromJNI()函数看他返回了什么值，接下来查找该函数的来源</p>
<blockquote>
<p>  static<br>  {<br>    System.loadLibrary(“hello-libs”);<br>  }</p>
</blockquote>
<p>加载了so模块hello-libs</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6671501-f40b92aa8b0e886a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="7zip打开apk"></p>
<p>这个时候分析so文件获取flag就行了。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6671501-8cf3623f282ba066.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="so文件拖入IDA"></p>
<p>这里很简单并没有加什么混淆，直接写在so文件中，到这里就算完成这题。</p>
<h1 id="0x04-另一种思路"><a href="#0x04-另一种思路" class="headerlink" title="0x04 另一种思路"></a>0x04 另一种思路</h1><p>如果这个题目的so中是经过运算加密返回的，并无法直接静态看到flag那该怎么办。</p>
<blockquote>
<p> this.mFlagEntryView.getText().toString().equals(stringFromJNI())</p>
</blockquote>
<p>前面我们分析过这个位置，因为使用equals进行字符串对比。<br>看下equals的java解释</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6671501-a8017425e94dc037.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="equals解释"></p>
<p>Equals之前使用了tostring，所以如果mFlagEntryView的内容与stringFromJNI返回值相同才会出现true的情况，那么也就是说stringFromJNI是把flag返回到程序领空的，我们直接修改smil代码把flag显示在mFlagResultView中。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/6671501-5e5c61615f55fa02.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="直接修改smail语句实现flag显示在view中"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/6671501-7c1bc6151beb3e87.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="直接修改smail语句实现flag显示在view中"></p>
<p>直接获取stringFromJNI返回值然后赋值给mFlagResultView，再安装运行即可。<br><img src="http://upload-images.jianshu.io/upload_images/6671501-7f5b6a7367713f74.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="打包运行效果"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://www.kongdewei.cn/2016/09/23/hello-world/</url>
      <content type="html"><![CDATA[<p>0Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.<br><a id="more"></a></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
  
  
</search>
