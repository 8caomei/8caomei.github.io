{"meta":{"title":"草莓的博客","subtitle":null,"description":"YWRtaW5Aa29uZ2Rld2VpLmNu==","author":"草莓丶","url":"http://www.kongdewei.cn"},"pages":[{"title":"标签","date":"2016-09-23T03:49:32.000Z","updated":"2016-09-23T06:30:20.000Z","comments":false,"path":"tags/index.html","permalink":"http://www.kongdewei.cn/tags/index.html","excerpt":"","text":""},{"title":"分类","date":"2016-09-23T03:42:33.000Z","updated":"2016-09-23T03:43:46.000Z","comments":false,"path":"categories/index.html","permalink":"http://www.kongdewei.cn/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"Android Studio动态调试Smail","slug":"Android-Studio动态调试Smail","date":"2017-07-03T07:33:15.000Z","updated":"2017-07-03T13:08:55.358Z","comments":true,"path":"2017/07/03/Android-Studio动态调试Smail/","link":"","permalink":"http://www.kongdewei.cn/2017/07/03/Android-Studio动态调试Smail/","excerpt":"首发：Android Studio动态调试Smail 0x00 前言DDCTF安卓题调试上一次是静态修改，后来我在想能不能动态调试得到Flag，于是就有了这篇文章。 apk下载地址http://download.csdn.net/detail/dad9988/9887419","text":"首发：Android Studio动态调试Smail 0x00 前言DDCTF安卓题调试上一次是静态修改，后来我在想能不能动态调试得到Flag，于是就有了这篇文章。 apk下载地址http://download.csdn.net/detail/dad9988/9887419 0x01 准备工作下载、安装android studio https://dl.google.com/dl/android/studio/install/2.3.2.0/android-studio-bundle-162.3934792-windows.exe 非常神奇，可以不翻(河蟹)墙下载,看来G(河蟹)F(河蟹)W对程序员还是很友善的。android studio集成了所需要的东西，以前eclipse需要另外装各种东西方便很多。 下载、安装模拟器 推荐使用这款模拟器https://www.yeshen.com/ 模拟器安装就不赘述了。 改之理很多apk解包使用apktools.jar会出现各种问题，直接用ide会方便很多。 下载地址： http://www.52pojie.cn/thread-399571-1-1.html 0x02 实战操作解包与导入工程到Android Studio首先使用apk改之理解包，直接用改之理打开apk包即可，改之理目录下就会有解包后的文件。 work目录下是解包后的文件 打开Android Studio选Import project 选择刚才的解包目录 直接next到底 导入后会有一段时间的加载文件。 安装smalideaFile—&gt;Settings—&gt;Install plugin from disk 下载smalidea-0.05.zip(这一步只需要做一次)https://bitbucket.org/JesusFreke/smali/downloads/ 选择刚下载的smalidea-0.05.zip 导入需要重启一下。 寻找命令行启动参数改之理解包目录下打开AndroidManifest.xml,记录activity层的android:name值。 adb shell启动apk运行模拟器，在Android Studio中启动android device monitor 一般会自动链接到ADM中，如果没有自动链接上去使用以下命令进行链接。 我推荐的这个模拟器是链接62001其他模拟器自查adb connect 127.0.0.1:62001 安装apk到模拟器（apk直接拉进去就自动安装了），并使用命令启动apk（adb如果未找到命令，请百度如何解决。） adb shell am start -D -n com.didictf.hellolibs/com.didictf.hellolibs.MainActivity 运行命令后可通过adm看到有个红色的虫子图标，这个时候apk已经挂起等待调试了。 在MainActivity下的OnCreate函数下断点 点击如图的三角，选择Edit Configurations 点击加号，选择Remote 修改port为8700点击OK 点击调试按钮挂载到模拟器中 已经断在我们下的断点。 0x03 调试DDCTF安卓题调试 上一篇文章分析得出关键位置在MainActivity中的onClickTest函数，这次我们直接在这里下断点，动态调试。 模拟器随便输入，点击test按钮，就会断在我们下的地方 点击如图加号添加v0 ,v1,p0监视变量，并F8单步向下，走到58行，就会从so中返回flag到系统apk的v1变量中。 对比下反编译的源码，更容易分析apk的工作流程。 0x04 总结对于这个CTF的apk，动态调试会更加直观，下好断点，添加监视变量直接但步向下即可，比静态修改重新打包来的方便。 转载请注明出处。","categories":[{"name":"移动安全android","slug":"移动安全android","permalink":"http://www.kongdewei.cn/categories/移动安全android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://www.kongdewei.cn/tags/Android/"}]},{"title":"DDCTF安卓题-writeup","slug":"DDCTF安卓题-writeup","date":"2017-06-30T06:00:11.000Z","updated":"2017-07-03T13:08:51.248Z","comments":true,"path":"2017/06/30/DDCTF安卓题-writeup/","link":"","permalink":"http://www.kongdewei.cn/2017/06/30/DDCTF安卓题-writeup/","excerpt":"0x01 引子前段做了一个滴滴CTF的其中一道安卓题目，题目并不难，主要分享一下做题过程和思路。","text":"0x01 引子前段做了一个滴滴CTF的其中一道安卓题目，题目并不难，主要分享一下做题过程和思路。 0x02 要求与提示赛题背景：本挑战结合了Android, Java, C/C++，加密算法等知识点，考察了挑战者的binary逆向技术和加密算法能力。 赛题描述：本题是一个app，请试分析app中隐藏的key，逆向加密算法并得到对应的秘钥。可以在app中尝试输入key，如果正确会显示“correct”，如果错误会显示“Wrong”。提 示：阅读assembly code，理解xor的加密逻辑和参数，解出答案。评分标准：key正确则可进入下一题。 Flag格式为DDCTF-XXXXXXXXXXXX@didichuxing.com 还是很好辨认的 0x03 分析与过程 直接点击下方的TEST按钮显示Wrong上apkkiller找到关键位置，进行关键词搜索（搜Wrong）。 反编译源码（appkiller上点击java图标） 这里直接贴上来代码123456789101112131415161718192021222324252627282930313233public class MainActivity extends AppCompatActivity&#123; private TextView mFlagEntryView; private TextView mFlagResultView; static &#123; System.loadLibrary(\"hello-libs\"); &#125; public void onClickTest(View paramView) &#123; if (this.mFlagEntryView.getText().toString().equals(stringFromJNI())) &#123; this.mFlagResultView.setText(\"Correct\"); &#125; for (;;) &#123; return; this.mFlagResultView.setText(\"Wrong\"); &#125; &#125; protected void onCreate(Bundle paramBundle) &#123; super.onCreate(paramBundle); setContentView(2130968602); this.mFlagEntryView = ((TextView)findViewById(2131427413)); this.mFlagResultView = ((TextView)findViewById(2131427415)); &#125; public native String stringFromJNI();&#125; 其中onClickTest响应TEST按钮点击 this.mFlagEntryView.getText().toString().equals(stringFromJNI()) 从mFlagEntryView得到view控件内容，tostring转string型，使用equals对比stringFromJNI()返回值。 一般我们应该跟踪stringFromJNI()函数看他返回了什么值，接下来查找该函数的来源 static { System.loadLibrary(“hello-libs”); } 加载了so模块hello-libs 这个时候分析so文件获取flag就行了。 这里很简单并没有加什么混淆，直接写在so文件中，到这里就算完成这题。 0x04 另一种思路如果这个题目的so中是经过运算加密返回的，并无法直接静态看到flag那该怎么办。 this.mFlagEntryView.getText().toString().equals(stringFromJNI()) 前面我们分析过这个位置，因为使用equals进行字符串对比。看下equals的java解释 Equals之前使用了tostring，所以如果mFlagEntryView的内容与stringFromJNI返回值相同才会出现true的情况，那么也就是说stringFromJNI是把flag返回到程序领空的，我们直接修改smil代码把flag显示在mFlagResultView中。 直接获取stringFromJNI返回值然后赋值给mFlagResultView，再安装运行即可。","categories":[{"name":"移动安全android","slug":"移动安全android","permalink":"http://www.kongdewei.cn/categories/移动安全android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://www.kongdewei.cn/tags/Android/"}]},{"title":"Hello World","slug":"hello-world","date":"2016-09-23T06:23:59.000Z","updated":"2017-06-30T13:55:06.671Z","comments":true,"path":"2016/09/23/hello-world/","link":"","permalink":"http://www.kongdewei.cn/2016/09/23/hello-world/","excerpt":"0Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","text":"0Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"test","slug":"test","permalink":"http://www.kongdewei.cn/categories/test/"}],"tags":[{"name":"你好世界","slug":"你好世界","permalink":"http://www.kongdewei.cn/tags/你好世界/"}]}]}